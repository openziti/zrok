// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/openziti/zrok/rest_model_zrok"
)

// RemoteShareReader is a Reader for the RemoteShare structure.
type RemoteShareReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoteShareReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoteShareOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRemoteShareUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoteShareInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewRemoteShareBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /agent/share] remoteShare", response, response.Code())
	}
}

// NewRemoteShareOK creates a RemoteShareOK with default headers values
func NewRemoteShareOK() *RemoteShareOK {
	return &RemoteShareOK{}
}

/*
RemoteShareOK describes a response with status code 200, with default header values.

ok
*/
type RemoteShareOK struct {
	Payload *RemoteShareOKBody
}

// IsSuccess returns true when this remote share o k response has a 2xx status code
func (o *RemoteShareOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remote share o k response has a 3xx status code
func (o *RemoteShareOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote share o k response has a 4xx status code
func (o *RemoteShareOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remote share o k response has a 5xx status code
func (o *RemoteShareOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remote share o k response a status code equal to that given
func (o *RemoteShareOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remote share o k response
func (o *RemoteShareOK) Code() int {
	return 200
}

func (o *RemoteShareOK) Error() string {
	return fmt.Sprintf("[POST /agent/share][%d] remoteShareOK  %+v", 200, o.Payload)
}

func (o *RemoteShareOK) String() string {
	return fmt.Sprintf("[POST /agent/share][%d] remoteShareOK  %+v", 200, o.Payload)
}

func (o *RemoteShareOK) GetPayload() *RemoteShareOKBody {
	return o.Payload
}

func (o *RemoteShareOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RemoteShareOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoteShareUnauthorized creates a RemoteShareUnauthorized with default headers values
func NewRemoteShareUnauthorized() *RemoteShareUnauthorized {
	return &RemoteShareUnauthorized{}
}

/*
RemoteShareUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type RemoteShareUnauthorized struct {
}

// IsSuccess returns true when this remote share unauthorized response has a 2xx status code
func (o *RemoteShareUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remote share unauthorized response has a 3xx status code
func (o *RemoteShareUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote share unauthorized response has a 4xx status code
func (o *RemoteShareUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this remote share unauthorized response has a 5xx status code
func (o *RemoteShareUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this remote share unauthorized response a status code equal to that given
func (o *RemoteShareUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the remote share unauthorized response
func (o *RemoteShareUnauthorized) Code() int {
	return 401
}

func (o *RemoteShareUnauthorized) Error() string {
	return fmt.Sprintf("[POST /agent/share][%d] remoteShareUnauthorized ", 401)
}

func (o *RemoteShareUnauthorized) String() string {
	return fmt.Sprintf("[POST /agent/share][%d] remoteShareUnauthorized ", 401)
}

func (o *RemoteShareUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoteShareInternalServerError creates a RemoteShareInternalServerError with default headers values
func NewRemoteShareInternalServerError() *RemoteShareInternalServerError {
	return &RemoteShareInternalServerError{}
}

/*
RemoteShareInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type RemoteShareInternalServerError struct {
}

// IsSuccess returns true when this remote share internal server error response has a 2xx status code
func (o *RemoteShareInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remote share internal server error response has a 3xx status code
func (o *RemoteShareInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote share internal server error response has a 4xx status code
func (o *RemoteShareInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remote share internal server error response has a 5xx status code
func (o *RemoteShareInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remote share internal server error response a status code equal to that given
func (o *RemoteShareInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remote share internal server error response
func (o *RemoteShareInternalServerError) Code() int {
	return 500
}

func (o *RemoteShareInternalServerError) Error() string {
	return fmt.Sprintf("[POST /agent/share][%d] remoteShareInternalServerError ", 500)
}

func (o *RemoteShareInternalServerError) String() string {
	return fmt.Sprintf("[POST /agent/share][%d] remoteShareInternalServerError ", 500)
}

func (o *RemoteShareInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoteShareBadGateway creates a RemoteShareBadGateway with default headers values
func NewRemoteShareBadGateway() *RemoteShareBadGateway {
	return &RemoteShareBadGateway{}
}

/*
RemoteShareBadGateway describes a response with status code 502, with default header values.

bad gateway; agent not reachable
*/
type RemoteShareBadGateway struct {
}

// IsSuccess returns true when this remote share bad gateway response has a 2xx status code
func (o *RemoteShareBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remote share bad gateway response has a 3xx status code
func (o *RemoteShareBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote share bad gateway response has a 4xx status code
func (o *RemoteShareBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this remote share bad gateway response has a 5xx status code
func (o *RemoteShareBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this remote share bad gateway response a status code equal to that given
func (o *RemoteShareBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the remote share bad gateway response
func (o *RemoteShareBadGateway) Code() int {
	return 502
}

func (o *RemoteShareBadGateway) Error() string {
	return fmt.Sprintf("[POST /agent/share][%d] remoteShareBadGateway ", 502)
}

func (o *RemoteShareBadGateway) String() string {
	return fmt.Sprintf("[POST /agent/share][%d] remoteShareBadGateway ", 502)
}

func (o *RemoteShareBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
RemoteShareBody remote share body
swagger:model RemoteShareBody
*/
type RemoteShareBody struct {

	// access grants
	AccessGrants []string `json:"accessGrants"`

	// backend mode
	// Enum: [proxy web tcpTunnel udpTunnel caddy drive socks vpn]
	BackendMode string `json:"backendMode,omitempty"`

	// basic auth
	BasicAuth []string `json:"basicAuth"`

	// env z Id
	EnvZID string `json:"envZId,omitempty"`

	// insecure
	Insecure bool `json:"insecure,omitempty"`

	// name selections
	NameSelections []*rest_model_zrok.NameSelection `json:"nameSelections"`

	// oauth email domains
	OauthEmailDomains []string `json:"oauthEmailDomains"`

	// oauth provider
	OauthProvider string `json:"oauthProvider,omitempty"`

	// oauth refresh interval
	OauthRefreshInterval string `json:"oauthRefreshInterval,omitempty"`

	// open
	Open bool `json:"open,omitempty"`

	// private share token
	PrivateShareToken string `json:"privateShareToken,omitempty"`

	// share mode
	// Enum: [public private]
	ShareMode string `json:"shareMode,omitempty"`

	// target
	Target string `json:"target,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this remote share body
func (o *RemoteShareBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBackendMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNameSelections(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShareMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var remoteShareBodyTypeBackendModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["proxy","web","tcpTunnel","udpTunnel","caddy","drive","socks","vpn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remoteShareBodyTypeBackendModePropEnum = append(remoteShareBodyTypeBackendModePropEnum, v)
	}
}

const (

	// RemoteShareBodyBackendModeProxy captures enum value "proxy"
	RemoteShareBodyBackendModeProxy string = "proxy"

	// RemoteShareBodyBackendModeWeb captures enum value "web"
	RemoteShareBodyBackendModeWeb string = "web"

	// RemoteShareBodyBackendModeTCPTunnel captures enum value "tcpTunnel"
	RemoteShareBodyBackendModeTCPTunnel string = "tcpTunnel"

	// RemoteShareBodyBackendModeUDPTunnel captures enum value "udpTunnel"
	RemoteShareBodyBackendModeUDPTunnel string = "udpTunnel"

	// RemoteShareBodyBackendModeCaddy captures enum value "caddy"
	RemoteShareBodyBackendModeCaddy string = "caddy"

	// RemoteShareBodyBackendModeDrive captures enum value "drive"
	RemoteShareBodyBackendModeDrive string = "drive"

	// RemoteShareBodyBackendModeSocks captures enum value "socks"
	RemoteShareBodyBackendModeSocks string = "socks"

	// RemoteShareBodyBackendModeVpn captures enum value "vpn"
	RemoteShareBodyBackendModeVpn string = "vpn"
)

// prop value enum
func (o *RemoteShareBody) validateBackendModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remoteShareBodyTypeBackendModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RemoteShareBody) validateBackendMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BackendMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBackendModeEnum("body"+"."+"backendMode", "body", o.BackendMode); err != nil {
		return err
	}

	return nil
}

func (o *RemoteShareBody) validateNameSelections(formats strfmt.Registry) error {
	if swag.IsZero(o.NameSelections) { // not required
		return nil
	}

	for i := 0; i < len(o.NameSelections); i++ {
		if swag.IsZero(o.NameSelections[i]) { // not required
			continue
		}

		if o.NameSelections[i] != nil {
			if err := o.NameSelections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "nameSelections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "nameSelections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var remoteShareBodyTypeShareModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remoteShareBodyTypeShareModePropEnum = append(remoteShareBodyTypeShareModePropEnum, v)
	}
}

const (

	// RemoteShareBodyShareModePublic captures enum value "public"
	RemoteShareBodyShareModePublic string = "public"

	// RemoteShareBodyShareModePrivate captures enum value "private"
	RemoteShareBodyShareModePrivate string = "private"
)

// prop value enum
func (o *RemoteShareBody) validateShareModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remoteShareBodyTypeShareModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RemoteShareBody) validateShareMode(formats strfmt.Registry) error {
	if swag.IsZero(o.ShareMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateShareModeEnum("body"+"."+"shareMode", "body", o.ShareMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this remote share body based on the context it is used
func (o *RemoteShareBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNameSelections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RemoteShareBody) contextValidateNameSelections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.NameSelections); i++ {

		if o.NameSelections[i] != nil {

			if swag.IsZero(o.NameSelections[i]) { // not required
				return nil
			}

			if err := o.NameSelections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "nameSelections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "nameSelections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RemoteShareBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RemoteShareBody) UnmarshalBinary(b []byte) error {
	var res RemoteShareBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RemoteShareOKBody remote share o k body
swagger:model RemoteShareOKBody
*/
type RemoteShareOKBody struct {

	// frontend endpoints
	FrontendEndpoints []string `json:"frontendEndpoints"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this remote share o k body
func (o *RemoteShareOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this remote share o k body based on context it is used
func (o *RemoteShareOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RemoteShareOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RemoteShareOKBody) UnmarshalBinary(b []byte) error {
	var res RemoteShareOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
