// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemoteStatusReader is a Reader for the RemoteStatus structure.
type RemoteStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoteStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoteStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRemoteStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoteStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewRemoteStatusBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /agent/status] remoteStatus", response, response.Code())
	}
}

// NewRemoteStatusOK creates a RemoteStatusOK with default headers values
func NewRemoteStatusOK() *RemoteStatusOK {
	return &RemoteStatusOK{}
}

/*
RemoteStatusOK describes a response with status code 200, with default header values.

ok
*/
type RemoteStatusOK struct {
	Payload *RemoteStatusOKBody
}

// IsSuccess returns true when this remote status o k response has a 2xx status code
func (o *RemoteStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remote status o k response has a 3xx status code
func (o *RemoteStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote status o k response has a 4xx status code
func (o *RemoteStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remote status o k response has a 5xx status code
func (o *RemoteStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remote status o k response a status code equal to that given
func (o *RemoteStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remote status o k response
func (o *RemoteStatusOK) Code() int {
	return 200
}

func (o *RemoteStatusOK) Error() string {
	return fmt.Sprintf("[POST /agent/status][%d] remoteStatusOK  %+v", 200, o.Payload)
}

func (o *RemoteStatusOK) String() string {
	return fmt.Sprintf("[POST /agent/status][%d] remoteStatusOK  %+v", 200, o.Payload)
}

func (o *RemoteStatusOK) GetPayload() *RemoteStatusOKBody {
	return o.Payload
}

func (o *RemoteStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RemoteStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoteStatusUnauthorized creates a RemoteStatusUnauthorized with default headers values
func NewRemoteStatusUnauthorized() *RemoteStatusUnauthorized {
	return &RemoteStatusUnauthorized{}
}

/*
RemoteStatusUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type RemoteStatusUnauthorized struct {
}

// IsSuccess returns true when this remote status unauthorized response has a 2xx status code
func (o *RemoteStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remote status unauthorized response has a 3xx status code
func (o *RemoteStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote status unauthorized response has a 4xx status code
func (o *RemoteStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this remote status unauthorized response has a 5xx status code
func (o *RemoteStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this remote status unauthorized response a status code equal to that given
func (o *RemoteStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the remote status unauthorized response
func (o *RemoteStatusUnauthorized) Code() int {
	return 401
}

func (o *RemoteStatusUnauthorized) Error() string {
	return fmt.Sprintf("[POST /agent/status][%d] remoteStatusUnauthorized ", 401)
}

func (o *RemoteStatusUnauthorized) String() string {
	return fmt.Sprintf("[POST /agent/status][%d] remoteStatusUnauthorized ", 401)
}

func (o *RemoteStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoteStatusInternalServerError creates a RemoteStatusInternalServerError with default headers values
func NewRemoteStatusInternalServerError() *RemoteStatusInternalServerError {
	return &RemoteStatusInternalServerError{}
}

/*
RemoteStatusInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type RemoteStatusInternalServerError struct {
}

// IsSuccess returns true when this remote status internal server error response has a 2xx status code
func (o *RemoteStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remote status internal server error response has a 3xx status code
func (o *RemoteStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote status internal server error response has a 4xx status code
func (o *RemoteStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remote status internal server error response has a 5xx status code
func (o *RemoteStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remote status internal server error response a status code equal to that given
func (o *RemoteStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remote status internal server error response
func (o *RemoteStatusInternalServerError) Code() int {
	return 500
}

func (o *RemoteStatusInternalServerError) Error() string {
	return fmt.Sprintf("[POST /agent/status][%d] remoteStatusInternalServerError ", 500)
}

func (o *RemoteStatusInternalServerError) String() string {
	return fmt.Sprintf("[POST /agent/status][%d] remoteStatusInternalServerError ", 500)
}

func (o *RemoteStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoteStatusBadGateway creates a RemoteStatusBadGateway with default headers values
func NewRemoteStatusBadGateway() *RemoteStatusBadGateway {
	return &RemoteStatusBadGateway{}
}

/*
RemoteStatusBadGateway describes a response with status code 502, with default header values.

bad gateway; agent not reachable
*/
type RemoteStatusBadGateway struct {
}

// IsSuccess returns true when this remote status bad gateway response has a 2xx status code
func (o *RemoteStatusBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remote status bad gateway response has a 3xx status code
func (o *RemoteStatusBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote status bad gateway response has a 4xx status code
func (o *RemoteStatusBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this remote status bad gateway response has a 5xx status code
func (o *RemoteStatusBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this remote status bad gateway response a status code equal to that given
func (o *RemoteStatusBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the remote status bad gateway response
func (o *RemoteStatusBadGateway) Code() int {
	return 502
}

func (o *RemoteStatusBadGateway) Error() string {
	return fmt.Sprintf("[POST /agent/status][%d] remoteStatusBadGateway ", 502)
}

func (o *RemoteStatusBadGateway) String() string {
	return fmt.Sprintf("[POST /agent/status][%d] remoteStatusBadGateway ", 502)
}

func (o *RemoteStatusBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
RemoteStatusBody remote status body
swagger:model RemoteStatusBody
*/
type RemoteStatusBody struct {

	// env z Id
	EnvZID string `json:"envZId,omitempty"`
}

// Validate validates this remote status body
func (o *RemoteStatusBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this remote status body based on context it is used
func (o *RemoteStatusBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RemoteStatusBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RemoteStatusBody) UnmarshalBinary(b []byte) error {
	var res RemoteStatusBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RemoteStatusOKBody remote status o k body
swagger:model RemoteStatusOKBody
*/
type RemoteStatusOKBody struct {

	// accesses
	Accesses []*RemoteStatusOKBodyAccessesItems0 `json:"accesses"`

	// shares
	Shares []*RemoteStatusOKBodySharesItems0 `json:"shares"`
}

// Validate validates this remote status o k body
func (o *RemoteStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccesses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShares(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RemoteStatusOKBody) validateAccesses(formats strfmt.Registry) error {
	if swag.IsZero(o.Accesses) { // not required
		return nil
	}

	for i := 0; i < len(o.Accesses); i++ {
		if swag.IsZero(o.Accesses[i]) { // not required
			continue
		}

		if o.Accesses[i] != nil {
			if err := o.Accesses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteStatusOK" + "." + "accesses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteStatusOK" + "." + "accesses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RemoteStatusOKBody) validateShares(formats strfmt.Registry) error {
	if swag.IsZero(o.Shares) { // not required
		return nil
	}

	for i := 0; i < len(o.Shares); i++ {
		if swag.IsZero(o.Shares[i]) { // not required
			continue
		}

		if o.Shares[i] != nil {
			if err := o.Shares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteStatusOK" + "." + "shares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteStatusOK" + "." + "shares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this remote status o k body based on the context it is used
func (o *RemoteStatusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccesses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShares(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RemoteStatusOKBody) contextValidateAccesses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Accesses); i++ {

		if o.Accesses[i] != nil {

			if swag.IsZero(o.Accesses[i]) { // not required
				return nil
			}

			if err := o.Accesses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteStatusOK" + "." + "accesses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteStatusOK" + "." + "accesses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RemoteStatusOKBody) contextValidateShares(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Shares); i++ {

		if o.Shares[i] != nil {

			if swag.IsZero(o.Shares[i]) { // not required
				return nil
			}

			if err := o.Shares[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remoteStatusOK" + "." + "shares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remoteStatusOK" + "." + "shares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RemoteStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RemoteStatusOKBody) UnmarshalBinary(b []byte) error {
	var res RemoteStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RemoteStatusOKBodyAccessesItems0 remote status o k body accesses items0
swagger:model RemoteStatusOKBodyAccessesItems0
*/
type RemoteStatusOKBodyAccessesItems0 struct {

	// bind address
	BindAddress string `json:"bindAddress,omitempty"`

	// frontend token
	FrontendToken string `json:"frontendToken,omitempty"`

	// response headers
	ResponseHeaders []string `json:"responseHeaders"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this remote status o k body accesses items0
func (o *RemoteStatusOKBodyAccessesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this remote status o k body accesses items0 based on context it is used
func (o *RemoteStatusOKBodyAccessesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RemoteStatusOKBodyAccessesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RemoteStatusOKBodyAccessesItems0) UnmarshalBinary(b []byte) error {
	var res RemoteStatusOKBodyAccessesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RemoteStatusOKBodySharesItems0 remote status o k body shares items0
swagger:model RemoteStatusOKBodySharesItems0
*/
type RemoteStatusOKBodySharesItems0 struct {

	// backend endpoint
	BackendEndpoint string `json:"backendEndpoint,omitempty"`

	// backend mode
	BackendMode string `json:"backendMode,omitempty"`

	// frontend endpoints
	FrontendEndpoints []string `json:"frontendEndpoints"`

	// open
	Open bool `json:"open,omitempty"`

	// share mode
	ShareMode string `json:"shareMode,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this remote status o k body shares items0
func (o *RemoteStatusOKBodySharesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this remote status o k body shares items0 based on context it is used
func (o *RemoteStatusOKBodySharesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RemoteStatusOKBodySharesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RemoteStatusOKBodySharesItems0) UnmarshalBinary(b []byte) error {
	var res RemoteStatusOKBodySharesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
