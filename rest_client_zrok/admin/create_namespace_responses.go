// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateNamespaceReader is a Reader for the CreateNamespace structure.
type CreateNamespaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNamespaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateNamespaceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateNamespaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateNamespaceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateNamespaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /namespace] createNamespace", response, response.Code())
	}
}

// NewCreateNamespaceCreated creates a CreateNamespaceCreated with default headers values
func NewCreateNamespaceCreated() *CreateNamespaceCreated {
	return &CreateNamespaceCreated{}
}

/*
CreateNamespaceCreated describes a response with status code 201, with default header values.

namespace created
*/
type CreateNamespaceCreated struct {
	Payload *CreateNamespaceCreatedBody
}

// IsSuccess returns true when this create namespace created response has a 2xx status code
func (o *CreateNamespaceCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create namespace created response has a 3xx status code
func (o *CreateNamespaceCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create namespace created response has a 4xx status code
func (o *CreateNamespaceCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create namespace created response has a 5xx status code
func (o *CreateNamespaceCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create namespace created response a status code equal to that given
func (o *CreateNamespaceCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create namespace created response
func (o *CreateNamespaceCreated) Code() int {
	return 201
}

func (o *CreateNamespaceCreated) Error() string {
	return fmt.Sprintf("[POST /namespace][%d] createNamespaceCreated  %+v", 201, o.Payload)
}

func (o *CreateNamespaceCreated) String() string {
	return fmt.Sprintf("[POST /namespace][%d] createNamespaceCreated  %+v", 201, o.Payload)
}

func (o *CreateNamespaceCreated) GetPayload() *CreateNamespaceCreatedBody {
	return o.Payload
}

func (o *CreateNamespaceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateNamespaceCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNamespaceUnauthorized creates a CreateNamespaceUnauthorized with default headers values
func NewCreateNamespaceUnauthorized() *CreateNamespaceUnauthorized {
	return &CreateNamespaceUnauthorized{}
}

/*
CreateNamespaceUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type CreateNamespaceUnauthorized struct {
}

// IsSuccess returns true when this create namespace unauthorized response has a 2xx status code
func (o *CreateNamespaceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create namespace unauthorized response has a 3xx status code
func (o *CreateNamespaceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create namespace unauthorized response has a 4xx status code
func (o *CreateNamespaceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create namespace unauthorized response has a 5xx status code
func (o *CreateNamespaceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create namespace unauthorized response a status code equal to that given
func (o *CreateNamespaceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create namespace unauthorized response
func (o *CreateNamespaceUnauthorized) Code() int {
	return 401
}

func (o *CreateNamespaceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /namespace][%d] createNamespaceUnauthorized ", 401)
}

func (o *CreateNamespaceUnauthorized) String() string {
	return fmt.Sprintf("[POST /namespace][%d] createNamespaceUnauthorized ", 401)
}

func (o *CreateNamespaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateNamespaceConflict creates a CreateNamespaceConflict with default headers values
func NewCreateNamespaceConflict() *CreateNamespaceConflict {
	return &CreateNamespaceConflict{}
}

/*
CreateNamespaceConflict describes a response with status code 409, with default header values.

namespace already exists
*/
type CreateNamespaceConflict struct {
}

// IsSuccess returns true when this create namespace conflict response has a 2xx status code
func (o *CreateNamespaceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create namespace conflict response has a 3xx status code
func (o *CreateNamespaceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create namespace conflict response has a 4xx status code
func (o *CreateNamespaceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create namespace conflict response has a 5xx status code
func (o *CreateNamespaceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create namespace conflict response a status code equal to that given
func (o *CreateNamespaceConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create namespace conflict response
func (o *CreateNamespaceConflict) Code() int {
	return 409
}

func (o *CreateNamespaceConflict) Error() string {
	return fmt.Sprintf("[POST /namespace][%d] createNamespaceConflict ", 409)
}

func (o *CreateNamespaceConflict) String() string {
	return fmt.Sprintf("[POST /namespace][%d] createNamespaceConflict ", 409)
}

func (o *CreateNamespaceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateNamespaceInternalServerError creates a CreateNamespaceInternalServerError with default headers values
func NewCreateNamespaceInternalServerError() *CreateNamespaceInternalServerError {
	return &CreateNamespaceInternalServerError{}
}

/*
CreateNamespaceInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type CreateNamespaceInternalServerError struct {
}

// IsSuccess returns true when this create namespace internal server error response has a 2xx status code
func (o *CreateNamespaceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create namespace internal server error response has a 3xx status code
func (o *CreateNamespaceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create namespace internal server error response has a 4xx status code
func (o *CreateNamespaceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create namespace internal server error response has a 5xx status code
func (o *CreateNamespaceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create namespace internal server error response a status code equal to that given
func (o *CreateNamespaceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create namespace internal server error response
func (o *CreateNamespaceInternalServerError) Code() int {
	return 500
}

func (o *CreateNamespaceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /namespace][%d] createNamespaceInternalServerError ", 500)
}

func (o *CreateNamespaceInternalServerError) String() string {
	return fmt.Sprintf("[POST /namespace][%d] createNamespaceInternalServerError ", 500)
}

func (o *CreateNamespaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
CreateNamespaceBody create namespace body
swagger:model CreateNamespaceBody
*/
type CreateNamespaceBody struct {

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this create namespace body
func (o *CreateNamespaceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create namespace body based on context it is used
func (o *CreateNamespaceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNamespaceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNamespaceBody) UnmarshalBinary(b []byte) error {
	var res CreateNamespaceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNamespaceCreatedBody create namespace created body
swagger:model CreateNamespaceCreatedBody
*/
type CreateNamespaceCreatedBody struct {

	// namespace token
	NamespaceToken string `json:"namespaceToken,omitempty"`
}

// Validate validates this create namespace created body
func (o *CreateNamespaceCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create namespace created body based on context it is used
func (o *CreateNamespaceCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNamespaceCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNamespaceCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateNamespaceCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
