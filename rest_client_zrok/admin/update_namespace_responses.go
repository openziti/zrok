// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNamespaceReader is a Reader for the UpdateNamespace structure.
type UpdateNamespaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNamespaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNamespaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateNamespaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateNamespaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateNamespaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /namespace] updateNamespace", response, response.Code())
	}
}

// NewUpdateNamespaceOK creates a UpdateNamespaceOK with default headers values
func NewUpdateNamespaceOK() *UpdateNamespaceOK {
	return &UpdateNamespaceOK{}
}

/*
UpdateNamespaceOK describes a response with status code 200, with default header values.

namespace updated
*/
type UpdateNamespaceOK struct {
}

// IsSuccess returns true when this update namespace o k response has a 2xx status code
func (o *UpdateNamespaceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update namespace o k response has a 3xx status code
func (o *UpdateNamespaceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update namespace o k response has a 4xx status code
func (o *UpdateNamespaceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update namespace o k response has a 5xx status code
func (o *UpdateNamespaceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update namespace o k response a status code equal to that given
func (o *UpdateNamespaceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update namespace o k response
func (o *UpdateNamespaceOK) Code() int {
	return 200
}

func (o *UpdateNamespaceOK) Error() string {
	return fmt.Sprintf("[PATCH /namespace][%d] updateNamespaceOK ", 200)
}

func (o *UpdateNamespaceOK) String() string {
	return fmt.Sprintf("[PATCH /namespace][%d] updateNamespaceOK ", 200)
}

func (o *UpdateNamespaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNamespaceUnauthorized creates a UpdateNamespaceUnauthorized with default headers values
func NewUpdateNamespaceUnauthorized() *UpdateNamespaceUnauthorized {
	return &UpdateNamespaceUnauthorized{}
}

/*
UpdateNamespaceUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type UpdateNamespaceUnauthorized struct {
}

// IsSuccess returns true when this update namespace unauthorized response has a 2xx status code
func (o *UpdateNamespaceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update namespace unauthorized response has a 3xx status code
func (o *UpdateNamespaceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update namespace unauthorized response has a 4xx status code
func (o *UpdateNamespaceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update namespace unauthorized response has a 5xx status code
func (o *UpdateNamespaceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update namespace unauthorized response a status code equal to that given
func (o *UpdateNamespaceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update namespace unauthorized response
func (o *UpdateNamespaceUnauthorized) Code() int {
	return 401
}

func (o *UpdateNamespaceUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /namespace][%d] updateNamespaceUnauthorized ", 401)
}

func (o *UpdateNamespaceUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /namespace][%d] updateNamespaceUnauthorized ", 401)
}

func (o *UpdateNamespaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNamespaceNotFound creates a UpdateNamespaceNotFound with default headers values
func NewUpdateNamespaceNotFound() *UpdateNamespaceNotFound {
	return &UpdateNamespaceNotFound{}
}

/*
UpdateNamespaceNotFound describes a response with status code 404, with default header values.

not found
*/
type UpdateNamespaceNotFound struct {
}

// IsSuccess returns true when this update namespace not found response has a 2xx status code
func (o *UpdateNamespaceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update namespace not found response has a 3xx status code
func (o *UpdateNamespaceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update namespace not found response has a 4xx status code
func (o *UpdateNamespaceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update namespace not found response has a 5xx status code
func (o *UpdateNamespaceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update namespace not found response a status code equal to that given
func (o *UpdateNamespaceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update namespace not found response
func (o *UpdateNamespaceNotFound) Code() int {
	return 404
}

func (o *UpdateNamespaceNotFound) Error() string {
	return fmt.Sprintf("[PATCH /namespace][%d] updateNamespaceNotFound ", 404)
}

func (o *UpdateNamespaceNotFound) String() string {
	return fmt.Sprintf("[PATCH /namespace][%d] updateNamespaceNotFound ", 404)
}

func (o *UpdateNamespaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNamespaceInternalServerError creates a UpdateNamespaceInternalServerError with default headers values
func NewUpdateNamespaceInternalServerError() *UpdateNamespaceInternalServerError {
	return &UpdateNamespaceInternalServerError{}
}

/*
UpdateNamespaceInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type UpdateNamespaceInternalServerError struct {
}

// IsSuccess returns true when this update namespace internal server error response has a 2xx status code
func (o *UpdateNamespaceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update namespace internal server error response has a 3xx status code
func (o *UpdateNamespaceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update namespace internal server error response has a 4xx status code
func (o *UpdateNamespaceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update namespace internal server error response has a 5xx status code
func (o *UpdateNamespaceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update namespace internal server error response a status code equal to that given
func (o *UpdateNamespaceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update namespace internal server error response
func (o *UpdateNamespaceInternalServerError) Code() int {
	return 500
}

func (o *UpdateNamespaceInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /namespace][%d] updateNamespaceInternalServerError ", 500)
}

func (o *UpdateNamespaceInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /namespace][%d] updateNamespaceInternalServerError ", 500)
}

func (o *UpdateNamespaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UpdateNamespaceBody update namespace body
swagger:model UpdateNamespaceBody
*/
type UpdateNamespaceBody struct {

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace token
	NamespaceToken string `json:"namespaceToken,omitempty"`

	// open
	Open bool `json:"open,omitempty"`

	// open set
	OpenSet bool `json:"openSet,omitempty"`
}

// Validate validates this update namespace body
func (o *UpdateNamespaceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update namespace body based on context it is used
func (o *UpdateNamespaceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNamespaceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNamespaceBody) UnmarshalBinary(b []byte) error {
	var res UpdateNamespaceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
