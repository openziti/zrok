// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListNamespacesReader is a Reader for the ListNamespaces structure.
type ListNamespacesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListNamespacesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListNamespacesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListNamespacesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListNamespacesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /namespaces] listNamespaces", response, response.Code())
	}
}

// NewListNamespacesOK creates a ListNamespacesOK with default headers values
func NewListNamespacesOK() *ListNamespacesOK {
	return &ListNamespacesOK{}
}

/*
ListNamespacesOK describes a response with status code 200, with default header values.

ok
*/
type ListNamespacesOK struct {
	Payload []*ListNamespacesOKBodyItems0
}

// IsSuccess returns true when this list namespaces o k response has a 2xx status code
func (o *ListNamespacesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list namespaces o k response has a 3xx status code
func (o *ListNamespacesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list namespaces o k response has a 4xx status code
func (o *ListNamespacesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list namespaces o k response has a 5xx status code
func (o *ListNamespacesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list namespaces o k response a status code equal to that given
func (o *ListNamespacesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list namespaces o k response
func (o *ListNamespacesOK) Code() int {
	return 200
}

func (o *ListNamespacesOK) Error() string {
	return fmt.Sprintf("[GET /namespaces][%d] listNamespacesOK  %+v", 200, o.Payload)
}

func (o *ListNamespacesOK) String() string {
	return fmt.Sprintf("[GET /namespaces][%d] listNamespacesOK  %+v", 200, o.Payload)
}

func (o *ListNamespacesOK) GetPayload() []*ListNamespacesOKBodyItems0 {
	return o.Payload
}

func (o *ListNamespacesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNamespacesUnauthorized creates a ListNamespacesUnauthorized with default headers values
func NewListNamespacesUnauthorized() *ListNamespacesUnauthorized {
	return &ListNamespacesUnauthorized{}
}

/*
ListNamespacesUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type ListNamespacesUnauthorized struct {
}

// IsSuccess returns true when this list namespaces unauthorized response has a 2xx status code
func (o *ListNamespacesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list namespaces unauthorized response has a 3xx status code
func (o *ListNamespacesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list namespaces unauthorized response has a 4xx status code
func (o *ListNamespacesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list namespaces unauthorized response has a 5xx status code
func (o *ListNamespacesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list namespaces unauthorized response a status code equal to that given
func (o *ListNamespacesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list namespaces unauthorized response
func (o *ListNamespacesUnauthorized) Code() int {
	return 401
}

func (o *ListNamespacesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /namespaces][%d] listNamespacesUnauthorized ", 401)
}

func (o *ListNamespacesUnauthorized) String() string {
	return fmt.Sprintf("[GET /namespaces][%d] listNamespacesUnauthorized ", 401)
}

func (o *ListNamespacesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListNamespacesInternalServerError creates a ListNamespacesInternalServerError with default headers values
func NewListNamespacesInternalServerError() *ListNamespacesInternalServerError {
	return &ListNamespacesInternalServerError{}
}

/*
ListNamespacesInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type ListNamespacesInternalServerError struct {
}

// IsSuccess returns true when this list namespaces internal server error response has a 2xx status code
func (o *ListNamespacesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list namespaces internal server error response has a 3xx status code
func (o *ListNamespacesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list namespaces internal server error response has a 4xx status code
func (o *ListNamespacesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list namespaces internal server error response has a 5xx status code
func (o *ListNamespacesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list namespaces internal server error response a status code equal to that given
func (o *ListNamespacesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list namespaces internal server error response
func (o *ListNamespacesInternalServerError) Code() int {
	return 500
}

func (o *ListNamespacesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /namespaces][%d] listNamespacesInternalServerError ", 500)
}

func (o *ListNamespacesInternalServerError) String() string {
	return fmt.Sprintf("[GET /namespaces][%d] listNamespacesInternalServerError ", 500)
}

func (o *ListNamespacesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ListNamespacesOKBodyItems0 list namespaces o k body items0
swagger:model ListNamespacesOKBodyItems0
*/
type ListNamespacesOKBodyItems0 struct {

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace token
	NamespaceToken string `json:"namespaceToken,omitempty"`

	// open
	Open bool `json:"open,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updatedAt,omitempty"`
}

// Validate validates this list namespaces o k body items0
func (o *ListNamespacesOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list namespaces o k body items0 based on context it is used
func (o *ListNamespacesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNamespacesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNamespacesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListNamespacesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
