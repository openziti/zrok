// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateFrontendReader is a Reader for the UpdateFrontend structure.
type UpdateFrontendReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateFrontendReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateFrontendOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateFrontendUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateFrontendNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateFrontendInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /frontend] updateFrontend", response, response.Code())
	}
}

// NewUpdateFrontendOK creates a UpdateFrontendOK with default headers values
func NewUpdateFrontendOK() *UpdateFrontendOK {
	return &UpdateFrontendOK{}
}

/*
UpdateFrontendOK describes a response with status code 200, with default header values.

frontend updated
*/
type UpdateFrontendOK struct {
}

// IsSuccess returns true when this update frontend o k response has a 2xx status code
func (o *UpdateFrontendOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update frontend o k response has a 3xx status code
func (o *UpdateFrontendOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update frontend o k response has a 4xx status code
func (o *UpdateFrontendOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update frontend o k response has a 5xx status code
func (o *UpdateFrontendOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update frontend o k response a status code equal to that given
func (o *UpdateFrontendOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update frontend o k response
func (o *UpdateFrontendOK) Code() int {
	return 200
}

func (o *UpdateFrontendOK) Error() string {
	return fmt.Sprintf("[PATCH /frontend][%d] updateFrontendOK ", 200)
}

func (o *UpdateFrontendOK) String() string {
	return fmt.Sprintf("[PATCH /frontend][%d] updateFrontendOK ", 200)
}

func (o *UpdateFrontendOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFrontendUnauthorized creates a UpdateFrontendUnauthorized with default headers values
func NewUpdateFrontendUnauthorized() *UpdateFrontendUnauthorized {
	return &UpdateFrontendUnauthorized{}
}

/*
UpdateFrontendUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type UpdateFrontendUnauthorized struct {
}

// IsSuccess returns true when this update frontend unauthorized response has a 2xx status code
func (o *UpdateFrontendUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update frontend unauthorized response has a 3xx status code
func (o *UpdateFrontendUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update frontend unauthorized response has a 4xx status code
func (o *UpdateFrontendUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update frontend unauthorized response has a 5xx status code
func (o *UpdateFrontendUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update frontend unauthorized response a status code equal to that given
func (o *UpdateFrontendUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update frontend unauthorized response
func (o *UpdateFrontendUnauthorized) Code() int {
	return 401
}

func (o *UpdateFrontendUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /frontend][%d] updateFrontendUnauthorized ", 401)
}

func (o *UpdateFrontendUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /frontend][%d] updateFrontendUnauthorized ", 401)
}

func (o *UpdateFrontendUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFrontendNotFound creates a UpdateFrontendNotFound with default headers values
func NewUpdateFrontendNotFound() *UpdateFrontendNotFound {
	return &UpdateFrontendNotFound{}
}

/*
UpdateFrontendNotFound describes a response with status code 404, with default header values.

not found
*/
type UpdateFrontendNotFound struct {
}

// IsSuccess returns true when this update frontend not found response has a 2xx status code
func (o *UpdateFrontendNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update frontend not found response has a 3xx status code
func (o *UpdateFrontendNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update frontend not found response has a 4xx status code
func (o *UpdateFrontendNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update frontend not found response has a 5xx status code
func (o *UpdateFrontendNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update frontend not found response a status code equal to that given
func (o *UpdateFrontendNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update frontend not found response
func (o *UpdateFrontendNotFound) Code() int {
	return 404
}

func (o *UpdateFrontendNotFound) Error() string {
	return fmt.Sprintf("[PATCH /frontend][%d] updateFrontendNotFound ", 404)
}

func (o *UpdateFrontendNotFound) String() string {
	return fmt.Sprintf("[PATCH /frontend][%d] updateFrontendNotFound ", 404)
}

func (o *UpdateFrontendNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFrontendInternalServerError creates a UpdateFrontendInternalServerError with default headers values
func NewUpdateFrontendInternalServerError() *UpdateFrontendInternalServerError {
	return &UpdateFrontendInternalServerError{}
}

/*
UpdateFrontendInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type UpdateFrontendInternalServerError struct {
}

// IsSuccess returns true when this update frontend internal server error response has a 2xx status code
func (o *UpdateFrontendInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update frontend internal server error response has a 3xx status code
func (o *UpdateFrontendInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update frontend internal server error response has a 4xx status code
func (o *UpdateFrontendInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update frontend internal server error response has a 5xx status code
func (o *UpdateFrontendInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update frontend internal server error response a status code equal to that given
func (o *UpdateFrontendInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update frontend internal server error response
func (o *UpdateFrontendInternalServerError) Code() int {
	return 500
}

func (o *UpdateFrontendInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /frontend][%d] updateFrontendInternalServerError ", 500)
}

func (o *UpdateFrontendInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /frontend][%d] updateFrontendInternalServerError ", 500)
}

func (o *UpdateFrontendInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UpdateFrontendBody update frontend body
swagger:model UpdateFrontendBody
*/
type UpdateFrontendBody struct {

	// dynamic
	Dynamic bool `json:"dynamic,omitempty"`

	// dynamic set
	DynamicSet bool `json:"dynamicSet,omitempty"`

	// frontend token
	FrontendToken string `json:"frontendToken,omitempty"`

	// public name
	PublicName string `json:"publicName,omitempty"`

	// url template
	URLTemplate string `json:"urlTemplate,omitempty"`
}

// Validate validates this update frontend body
func (o *UpdateFrontendBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update frontend body based on context it is used
func (o *UpdateFrontendBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateFrontendBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateFrontendBody) UnmarshalBinary(b []byte) error {
	var res UpdateFrontendBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
