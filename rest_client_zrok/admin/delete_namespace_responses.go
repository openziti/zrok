// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteNamespaceReader is a Reader for the DeleteNamespace structure.
type DeleteNamespaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNamespaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNamespaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteNamespaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteNamespaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteNamespaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /namespace] deleteNamespace", response, response.Code())
	}
}

// NewDeleteNamespaceOK creates a DeleteNamespaceOK with default headers values
func NewDeleteNamespaceOK() *DeleteNamespaceOK {
	return &DeleteNamespaceOK{}
}

/*
DeleteNamespaceOK describes a response with status code 200, with default header values.

namespace deleted
*/
type DeleteNamespaceOK struct {
}

// IsSuccess returns true when this delete namespace o k response has a 2xx status code
func (o *DeleteNamespaceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete namespace o k response has a 3xx status code
func (o *DeleteNamespaceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete namespace o k response has a 4xx status code
func (o *DeleteNamespaceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete namespace o k response has a 5xx status code
func (o *DeleteNamespaceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete namespace o k response a status code equal to that given
func (o *DeleteNamespaceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete namespace o k response
func (o *DeleteNamespaceOK) Code() int {
	return 200
}

func (o *DeleteNamespaceOK) Error() string {
	return fmt.Sprintf("[DELETE /namespace][%d] deleteNamespaceOK ", 200)
}

func (o *DeleteNamespaceOK) String() string {
	return fmt.Sprintf("[DELETE /namespace][%d] deleteNamespaceOK ", 200)
}

func (o *DeleteNamespaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNamespaceUnauthorized creates a DeleteNamespaceUnauthorized with default headers values
func NewDeleteNamespaceUnauthorized() *DeleteNamespaceUnauthorized {
	return &DeleteNamespaceUnauthorized{}
}

/*
DeleteNamespaceUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DeleteNamespaceUnauthorized struct {
}

// IsSuccess returns true when this delete namespace unauthorized response has a 2xx status code
func (o *DeleteNamespaceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete namespace unauthorized response has a 3xx status code
func (o *DeleteNamespaceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete namespace unauthorized response has a 4xx status code
func (o *DeleteNamespaceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete namespace unauthorized response has a 5xx status code
func (o *DeleteNamespaceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete namespace unauthorized response a status code equal to that given
func (o *DeleteNamespaceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete namespace unauthorized response
func (o *DeleteNamespaceUnauthorized) Code() int {
	return 401
}

func (o *DeleteNamespaceUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /namespace][%d] deleteNamespaceUnauthorized ", 401)
}

func (o *DeleteNamespaceUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /namespace][%d] deleteNamespaceUnauthorized ", 401)
}

func (o *DeleteNamespaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNamespaceNotFound creates a DeleteNamespaceNotFound with default headers values
func NewDeleteNamespaceNotFound() *DeleteNamespaceNotFound {
	return &DeleteNamespaceNotFound{}
}

/*
DeleteNamespaceNotFound describes a response with status code 404, with default header values.

not found
*/
type DeleteNamespaceNotFound struct {
}

// IsSuccess returns true when this delete namespace not found response has a 2xx status code
func (o *DeleteNamespaceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete namespace not found response has a 3xx status code
func (o *DeleteNamespaceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete namespace not found response has a 4xx status code
func (o *DeleteNamespaceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete namespace not found response has a 5xx status code
func (o *DeleteNamespaceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete namespace not found response a status code equal to that given
func (o *DeleteNamespaceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete namespace not found response
func (o *DeleteNamespaceNotFound) Code() int {
	return 404
}

func (o *DeleteNamespaceNotFound) Error() string {
	return fmt.Sprintf("[DELETE /namespace][%d] deleteNamespaceNotFound ", 404)
}

func (o *DeleteNamespaceNotFound) String() string {
	return fmt.Sprintf("[DELETE /namespace][%d] deleteNamespaceNotFound ", 404)
}

func (o *DeleteNamespaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNamespaceInternalServerError creates a DeleteNamespaceInternalServerError with default headers values
func NewDeleteNamespaceInternalServerError() *DeleteNamespaceInternalServerError {
	return &DeleteNamespaceInternalServerError{}
}

/*
DeleteNamespaceInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type DeleteNamespaceInternalServerError struct {
}

// IsSuccess returns true when this delete namespace internal server error response has a 2xx status code
func (o *DeleteNamespaceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete namespace internal server error response has a 3xx status code
func (o *DeleteNamespaceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete namespace internal server error response has a 4xx status code
func (o *DeleteNamespaceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete namespace internal server error response has a 5xx status code
func (o *DeleteNamespaceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete namespace internal server error response a status code equal to that given
func (o *DeleteNamespaceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete namespace internal server error response
func (o *DeleteNamespaceInternalServerError) Code() int {
	return 500
}

func (o *DeleteNamespaceInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /namespace][%d] deleteNamespaceInternalServerError ", 500)
}

func (o *DeleteNamespaceInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /namespace][%d] deleteNamespaceInternalServerError ", 500)
}

func (o *DeleteNamespaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
DeleteNamespaceBody delete namespace body
swagger:model DeleteNamespaceBody
*/
type DeleteNamespaceBody struct {

	// namespace token
	NamespaceToken string `json:"namespaceToken,omitempty"`
}

// Validate validates this delete namespace body
func (o *DeleteNamespaceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete namespace body based on context it is used
func (o *DeleteNamespaceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteNamespaceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteNamespaceBody) UnmarshalBinary(b []byte) error {
	var res DeleteNamespaceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
