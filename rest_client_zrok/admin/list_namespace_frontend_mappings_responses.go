// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListNamespaceFrontendMappingsReader is a Reader for the ListNamespaceFrontendMappings structure.
type ListNamespaceFrontendMappingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListNamespaceFrontendMappingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListNamespaceFrontendMappingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListNamespaceFrontendMappingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListNamespaceFrontendMappingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListNamespaceFrontendMappingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /namespace/frontend/mapping/{namespaceToken}] listNamespaceFrontendMappings", response, response.Code())
	}
}

// NewListNamespaceFrontendMappingsOK creates a ListNamespaceFrontendMappingsOK with default headers values
func NewListNamespaceFrontendMappingsOK() *ListNamespaceFrontendMappingsOK {
	return &ListNamespaceFrontendMappingsOK{}
}

/*
ListNamespaceFrontendMappingsOK describes a response with status code 200, with default header values.

namespace frontend mappings listed
*/
type ListNamespaceFrontendMappingsOK struct {
	Payload []*ListNamespaceFrontendMappingsOKBodyItems0
}

// IsSuccess returns true when this list namespace frontend mappings o k response has a 2xx status code
func (o *ListNamespaceFrontendMappingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list namespace frontend mappings o k response has a 3xx status code
func (o *ListNamespaceFrontendMappingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list namespace frontend mappings o k response has a 4xx status code
func (o *ListNamespaceFrontendMappingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list namespace frontend mappings o k response has a 5xx status code
func (o *ListNamespaceFrontendMappingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list namespace frontend mappings o k response a status code equal to that given
func (o *ListNamespaceFrontendMappingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list namespace frontend mappings o k response
func (o *ListNamespaceFrontendMappingsOK) Code() int {
	return 200
}

func (o *ListNamespaceFrontendMappingsOK) Error() string {
	return fmt.Sprintf("[GET /namespace/frontend/mapping/{namespaceToken}][%d] listNamespaceFrontendMappingsOK  %+v", 200, o.Payload)
}

func (o *ListNamespaceFrontendMappingsOK) String() string {
	return fmt.Sprintf("[GET /namespace/frontend/mapping/{namespaceToken}][%d] listNamespaceFrontendMappingsOK  %+v", 200, o.Payload)
}

func (o *ListNamespaceFrontendMappingsOK) GetPayload() []*ListNamespaceFrontendMappingsOKBodyItems0 {
	return o.Payload
}

func (o *ListNamespaceFrontendMappingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNamespaceFrontendMappingsUnauthorized creates a ListNamespaceFrontendMappingsUnauthorized with default headers values
func NewListNamespaceFrontendMappingsUnauthorized() *ListNamespaceFrontendMappingsUnauthorized {
	return &ListNamespaceFrontendMappingsUnauthorized{}
}

/*
ListNamespaceFrontendMappingsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type ListNamespaceFrontendMappingsUnauthorized struct {
}

// IsSuccess returns true when this list namespace frontend mappings unauthorized response has a 2xx status code
func (o *ListNamespaceFrontendMappingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list namespace frontend mappings unauthorized response has a 3xx status code
func (o *ListNamespaceFrontendMappingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list namespace frontend mappings unauthorized response has a 4xx status code
func (o *ListNamespaceFrontendMappingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list namespace frontend mappings unauthorized response has a 5xx status code
func (o *ListNamespaceFrontendMappingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list namespace frontend mappings unauthorized response a status code equal to that given
func (o *ListNamespaceFrontendMappingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list namespace frontend mappings unauthorized response
func (o *ListNamespaceFrontendMappingsUnauthorized) Code() int {
	return 401
}

func (o *ListNamespaceFrontendMappingsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /namespace/frontend/mapping/{namespaceToken}][%d] listNamespaceFrontendMappingsUnauthorized ", 401)
}

func (o *ListNamespaceFrontendMappingsUnauthorized) String() string {
	return fmt.Sprintf("[GET /namespace/frontend/mapping/{namespaceToken}][%d] listNamespaceFrontendMappingsUnauthorized ", 401)
}

func (o *ListNamespaceFrontendMappingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListNamespaceFrontendMappingsNotFound creates a ListNamespaceFrontendMappingsNotFound with default headers values
func NewListNamespaceFrontendMappingsNotFound() *ListNamespaceFrontendMappingsNotFound {
	return &ListNamespaceFrontendMappingsNotFound{}
}

/*
ListNamespaceFrontendMappingsNotFound describes a response with status code 404, with default header values.

namespace not found
*/
type ListNamespaceFrontendMappingsNotFound struct {
}

// IsSuccess returns true when this list namespace frontend mappings not found response has a 2xx status code
func (o *ListNamespaceFrontendMappingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list namespace frontend mappings not found response has a 3xx status code
func (o *ListNamespaceFrontendMappingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list namespace frontend mappings not found response has a 4xx status code
func (o *ListNamespaceFrontendMappingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list namespace frontend mappings not found response has a 5xx status code
func (o *ListNamespaceFrontendMappingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list namespace frontend mappings not found response a status code equal to that given
func (o *ListNamespaceFrontendMappingsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list namespace frontend mappings not found response
func (o *ListNamespaceFrontendMappingsNotFound) Code() int {
	return 404
}

func (o *ListNamespaceFrontendMappingsNotFound) Error() string {
	return fmt.Sprintf("[GET /namespace/frontend/mapping/{namespaceToken}][%d] listNamespaceFrontendMappingsNotFound ", 404)
}

func (o *ListNamespaceFrontendMappingsNotFound) String() string {
	return fmt.Sprintf("[GET /namespace/frontend/mapping/{namespaceToken}][%d] listNamespaceFrontendMappingsNotFound ", 404)
}

func (o *ListNamespaceFrontendMappingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListNamespaceFrontendMappingsInternalServerError creates a ListNamespaceFrontendMappingsInternalServerError with default headers values
func NewListNamespaceFrontendMappingsInternalServerError() *ListNamespaceFrontendMappingsInternalServerError {
	return &ListNamespaceFrontendMappingsInternalServerError{}
}

/*
ListNamespaceFrontendMappingsInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type ListNamespaceFrontendMappingsInternalServerError struct {
}

// IsSuccess returns true when this list namespace frontend mappings internal server error response has a 2xx status code
func (o *ListNamespaceFrontendMappingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list namespace frontend mappings internal server error response has a 3xx status code
func (o *ListNamespaceFrontendMappingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list namespace frontend mappings internal server error response has a 4xx status code
func (o *ListNamespaceFrontendMappingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list namespace frontend mappings internal server error response has a 5xx status code
func (o *ListNamespaceFrontendMappingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list namespace frontend mappings internal server error response a status code equal to that given
func (o *ListNamespaceFrontendMappingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list namespace frontend mappings internal server error response
func (o *ListNamespaceFrontendMappingsInternalServerError) Code() int {
	return 500
}

func (o *ListNamespaceFrontendMappingsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /namespace/frontend/mapping/{namespaceToken}][%d] listNamespaceFrontendMappingsInternalServerError ", 500)
}

func (o *ListNamespaceFrontendMappingsInternalServerError) String() string {
	return fmt.Sprintf("[GET /namespace/frontend/mapping/{namespaceToken}][%d] listNamespaceFrontendMappingsInternalServerError ", 500)
}

func (o *ListNamespaceFrontendMappingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ListNamespaceFrontendMappingsOKBodyItems0 list namespace frontend mappings o k body items0
swagger:model ListNamespaceFrontendMappingsOKBodyItems0
*/
type ListNamespaceFrontendMappingsOKBodyItems0 struct {

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// frontend token
	FrontendToken string `json:"frontendToken,omitempty"`

	// is default
	IsDefault bool `json:"isDefault,omitempty"`

	// namespace token
	NamespaceToken string `json:"namespaceToken,omitempty"`
}

// Validate validates this list namespace frontend mappings o k body items0
func (o *ListNamespaceFrontendMappingsOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list namespace frontend mappings o k body items0 based on context it is used
func (o *ListNamespaceFrontendMappingsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNamespaceFrontendMappingsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNamespaceFrontendMappingsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListNamespaceFrontendMappingsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
