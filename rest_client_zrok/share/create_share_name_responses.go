// Code generated by go-swagger; DO NOT EDIT.

package share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// CreateShareNameReader is a Reader for the CreateShareName structure.
type CreateShareNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateShareNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateShareNameCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateShareNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateShareNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateShareNameConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateShareNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /share/name] createShareName", response, response.Code())
	}
}

// NewCreateShareNameCreated creates a CreateShareNameCreated with default headers values
func NewCreateShareNameCreated() *CreateShareNameCreated {
	return &CreateShareNameCreated{}
}

/*
CreateShareNameCreated describes a response with status code 201, with default header values.

name created
*/
type CreateShareNameCreated struct {
}

// IsSuccess returns true when this create share name created response has a 2xx status code
func (o *CreateShareNameCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create share name created response has a 3xx status code
func (o *CreateShareNameCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create share name created response has a 4xx status code
func (o *CreateShareNameCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create share name created response has a 5xx status code
func (o *CreateShareNameCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create share name created response a status code equal to that given
func (o *CreateShareNameCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create share name created response
func (o *CreateShareNameCreated) Code() int {
	return 201
}

func (o *CreateShareNameCreated) Error() string {
	return fmt.Sprintf("[POST /share/name][%d] createShareNameCreated ", 201)
}

func (o *CreateShareNameCreated) String() string {
	return fmt.Sprintf("[POST /share/name][%d] createShareNameCreated ", 201)
}

func (o *CreateShareNameCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateShareNameUnauthorized creates a CreateShareNameUnauthorized with default headers values
func NewCreateShareNameUnauthorized() *CreateShareNameUnauthorized {
	return &CreateShareNameUnauthorized{}
}

/*
CreateShareNameUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type CreateShareNameUnauthorized struct {
}

// IsSuccess returns true when this create share name unauthorized response has a 2xx status code
func (o *CreateShareNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create share name unauthorized response has a 3xx status code
func (o *CreateShareNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create share name unauthorized response has a 4xx status code
func (o *CreateShareNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create share name unauthorized response has a 5xx status code
func (o *CreateShareNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create share name unauthorized response a status code equal to that given
func (o *CreateShareNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create share name unauthorized response
func (o *CreateShareNameUnauthorized) Code() int {
	return 401
}

func (o *CreateShareNameUnauthorized) Error() string {
	return fmt.Sprintf("[POST /share/name][%d] createShareNameUnauthorized ", 401)
}

func (o *CreateShareNameUnauthorized) String() string {
	return fmt.Sprintf("[POST /share/name][%d] createShareNameUnauthorized ", 401)
}

func (o *CreateShareNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateShareNameNotFound creates a CreateShareNameNotFound with default headers values
func NewCreateShareNameNotFound() *CreateShareNameNotFound {
	return &CreateShareNameNotFound{}
}

/*
CreateShareNameNotFound describes a response with status code 404, with default header values.

namespace not found
*/
type CreateShareNameNotFound struct {
}

// IsSuccess returns true when this create share name not found response has a 2xx status code
func (o *CreateShareNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create share name not found response has a 3xx status code
func (o *CreateShareNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create share name not found response has a 4xx status code
func (o *CreateShareNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create share name not found response has a 5xx status code
func (o *CreateShareNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create share name not found response a status code equal to that given
func (o *CreateShareNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create share name not found response
func (o *CreateShareNameNotFound) Code() int {
	return 404
}

func (o *CreateShareNameNotFound) Error() string {
	return fmt.Sprintf("[POST /share/name][%d] createShareNameNotFound ", 404)
}

func (o *CreateShareNameNotFound) String() string {
	return fmt.Sprintf("[POST /share/name][%d] createShareNameNotFound ", 404)
}

func (o *CreateShareNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateShareNameConflict creates a CreateShareNameConflict with default headers values
func NewCreateShareNameConflict() *CreateShareNameConflict {
	return &CreateShareNameConflict{}
}

/*
CreateShareNameConflict describes a response with status code 409, with default header values.

name already exists
*/
type CreateShareNameConflict struct {
	Payload rest_model_zrok.ErrorMessage
}

// IsSuccess returns true when this create share name conflict response has a 2xx status code
func (o *CreateShareNameConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create share name conflict response has a 3xx status code
func (o *CreateShareNameConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create share name conflict response has a 4xx status code
func (o *CreateShareNameConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create share name conflict response has a 5xx status code
func (o *CreateShareNameConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create share name conflict response a status code equal to that given
func (o *CreateShareNameConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create share name conflict response
func (o *CreateShareNameConflict) Code() int {
	return 409
}

func (o *CreateShareNameConflict) Error() string {
	return fmt.Sprintf("[POST /share/name][%d] createShareNameConflict  %+v", 409, o.Payload)
}

func (o *CreateShareNameConflict) String() string {
	return fmt.Sprintf("[POST /share/name][%d] createShareNameConflict  %+v", 409, o.Payload)
}

func (o *CreateShareNameConflict) GetPayload() rest_model_zrok.ErrorMessage {
	return o.Payload
}

func (o *CreateShareNameConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShareNameInternalServerError creates a CreateShareNameInternalServerError with default headers values
func NewCreateShareNameInternalServerError() *CreateShareNameInternalServerError {
	return &CreateShareNameInternalServerError{}
}

/*
CreateShareNameInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type CreateShareNameInternalServerError struct {
}

// IsSuccess returns true when this create share name internal server error response has a 2xx status code
func (o *CreateShareNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create share name internal server error response has a 3xx status code
func (o *CreateShareNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create share name internal server error response has a 4xx status code
func (o *CreateShareNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create share name internal server error response has a 5xx status code
func (o *CreateShareNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create share name internal server error response a status code equal to that given
func (o *CreateShareNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create share name internal server error response
func (o *CreateShareNameInternalServerError) Code() int {
	return 500
}

func (o *CreateShareNameInternalServerError) Error() string {
	return fmt.Sprintf("[POST /share/name][%d] createShareNameInternalServerError ", 500)
}

func (o *CreateShareNameInternalServerError) String() string {
	return fmt.Sprintf("[POST /share/name][%d] createShareNameInternalServerError ", 500)
}

func (o *CreateShareNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
CreateShareNameBody create share name body
swagger:model CreateShareNameBody
*/
type CreateShareNameBody struct {

	// name
	Name string `json:"name,omitempty"`

	// namespace token
	NamespaceToken string `json:"namespaceToken,omitempty"`
}

// Validate validates this create share name body
func (o *CreateShareNameBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create share name body based on context it is used
func (o *CreateShareNameBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateShareNameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateShareNameBody) UnmarshalBinary(b []byte) error {
	var res CreateShareNameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
