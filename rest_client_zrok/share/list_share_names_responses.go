// Code generated by go-swagger; DO NOT EDIT.

package share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListShareNamesReader is a Reader for the ListShareNames structure.
type ListShareNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListShareNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListShareNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListShareNamesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListShareNamesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListShareNamesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /share/names/{namespaceToken}] listShareNames", response, response.Code())
	}
}

// NewListShareNamesOK creates a ListShareNamesOK with default headers values
func NewListShareNamesOK() *ListShareNamesOK {
	return &ListShareNamesOK{}
}

/*
ListShareNamesOK describes a response with status code 200, with default header values.

ok
*/
type ListShareNamesOK struct {
	Payload []*ListShareNamesOKBodyItems0
}

// IsSuccess returns true when this list share names o k response has a 2xx status code
func (o *ListShareNamesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list share names o k response has a 3xx status code
func (o *ListShareNamesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list share names o k response has a 4xx status code
func (o *ListShareNamesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list share names o k response has a 5xx status code
func (o *ListShareNamesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list share names o k response a status code equal to that given
func (o *ListShareNamesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list share names o k response
func (o *ListShareNamesOK) Code() int {
	return 200
}

func (o *ListShareNamesOK) Error() string {
	return fmt.Sprintf("[GET /share/names/{namespaceToken}][%d] listShareNamesOK  %+v", 200, o.Payload)
}

func (o *ListShareNamesOK) String() string {
	return fmt.Sprintf("[GET /share/names/{namespaceToken}][%d] listShareNamesOK  %+v", 200, o.Payload)
}

func (o *ListShareNamesOK) GetPayload() []*ListShareNamesOKBodyItems0 {
	return o.Payload
}

func (o *ListShareNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShareNamesUnauthorized creates a ListShareNamesUnauthorized with default headers values
func NewListShareNamesUnauthorized() *ListShareNamesUnauthorized {
	return &ListShareNamesUnauthorized{}
}

/*
ListShareNamesUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type ListShareNamesUnauthorized struct {
}

// IsSuccess returns true when this list share names unauthorized response has a 2xx status code
func (o *ListShareNamesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list share names unauthorized response has a 3xx status code
func (o *ListShareNamesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list share names unauthorized response has a 4xx status code
func (o *ListShareNamesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list share names unauthorized response has a 5xx status code
func (o *ListShareNamesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list share names unauthorized response a status code equal to that given
func (o *ListShareNamesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list share names unauthorized response
func (o *ListShareNamesUnauthorized) Code() int {
	return 401
}

func (o *ListShareNamesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /share/names/{namespaceToken}][%d] listShareNamesUnauthorized ", 401)
}

func (o *ListShareNamesUnauthorized) String() string {
	return fmt.Sprintf("[GET /share/names/{namespaceToken}][%d] listShareNamesUnauthorized ", 401)
}

func (o *ListShareNamesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListShareNamesNotFound creates a ListShareNamesNotFound with default headers values
func NewListShareNamesNotFound() *ListShareNamesNotFound {
	return &ListShareNamesNotFound{}
}

/*
ListShareNamesNotFound describes a response with status code 404, with default header values.

namespace not found
*/
type ListShareNamesNotFound struct {
}

// IsSuccess returns true when this list share names not found response has a 2xx status code
func (o *ListShareNamesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list share names not found response has a 3xx status code
func (o *ListShareNamesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list share names not found response has a 4xx status code
func (o *ListShareNamesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list share names not found response has a 5xx status code
func (o *ListShareNamesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list share names not found response a status code equal to that given
func (o *ListShareNamesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list share names not found response
func (o *ListShareNamesNotFound) Code() int {
	return 404
}

func (o *ListShareNamesNotFound) Error() string {
	return fmt.Sprintf("[GET /share/names/{namespaceToken}][%d] listShareNamesNotFound ", 404)
}

func (o *ListShareNamesNotFound) String() string {
	return fmt.Sprintf("[GET /share/names/{namespaceToken}][%d] listShareNamesNotFound ", 404)
}

func (o *ListShareNamesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListShareNamesInternalServerError creates a ListShareNamesInternalServerError with default headers values
func NewListShareNamesInternalServerError() *ListShareNamesInternalServerError {
	return &ListShareNamesInternalServerError{}
}

/*
ListShareNamesInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type ListShareNamesInternalServerError struct {
}

// IsSuccess returns true when this list share names internal server error response has a 2xx status code
func (o *ListShareNamesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list share names internal server error response has a 3xx status code
func (o *ListShareNamesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list share names internal server error response has a 4xx status code
func (o *ListShareNamesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list share names internal server error response has a 5xx status code
func (o *ListShareNamesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list share names internal server error response a status code equal to that given
func (o *ListShareNamesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list share names internal server error response
func (o *ListShareNamesInternalServerError) Code() int {
	return 500
}

func (o *ListShareNamesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /share/names/{namespaceToken}][%d] listShareNamesInternalServerError ", 500)
}

func (o *ListShareNamesInternalServerError) String() string {
	return fmt.Sprintf("[GET /share/names/{namespaceToken}][%d] listShareNamesInternalServerError ", 500)
}

func (o *ListShareNamesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ListShareNamesOKBodyItems0 list share names o k body items0
swagger:model ListShareNamesOKBodyItems0
*/
type ListShareNamesOKBodyItems0 struct {

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this list share names o k body items0
func (o *ListShareNamesOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list share names o k body items0 based on context it is used
func (o *ListShareNamesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListShareNamesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListShareNamesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListShareNamesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
