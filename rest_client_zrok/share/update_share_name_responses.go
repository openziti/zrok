// Code generated by go-swagger; DO NOT EDIT.

package share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// UpdateShareNameReader is a Reader for the UpdateShareName structure.
type UpdateShareNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateShareNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateShareNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateShareNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateShareNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateShareNameConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateShareNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /share/name] updateShareName", response, response.Code())
	}
}

// NewUpdateShareNameOK creates a UpdateShareNameOK with default headers values
func NewUpdateShareNameOK() *UpdateShareNameOK {
	return &UpdateShareNameOK{}
}

/*
UpdateShareNameOK describes a response with status code 200, with default header values.

name updated successfully
*/
type UpdateShareNameOK struct {
}

// IsSuccess returns true when this update share name o k response has a 2xx status code
func (o *UpdateShareNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update share name o k response has a 3xx status code
func (o *UpdateShareNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update share name o k response has a 4xx status code
func (o *UpdateShareNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update share name o k response has a 5xx status code
func (o *UpdateShareNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update share name o k response a status code equal to that given
func (o *UpdateShareNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update share name o k response
func (o *UpdateShareNameOK) Code() int {
	return 200
}

func (o *UpdateShareNameOK) Error() string {
	return fmt.Sprintf("[PATCH /share/name][%d] updateShareNameOK ", 200)
}

func (o *UpdateShareNameOK) String() string {
	return fmt.Sprintf("[PATCH /share/name][%d] updateShareNameOK ", 200)
}

func (o *UpdateShareNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateShareNameUnauthorized creates a UpdateShareNameUnauthorized with default headers values
func NewUpdateShareNameUnauthorized() *UpdateShareNameUnauthorized {
	return &UpdateShareNameUnauthorized{}
}

/*
UpdateShareNameUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type UpdateShareNameUnauthorized struct {
}

// IsSuccess returns true when this update share name unauthorized response has a 2xx status code
func (o *UpdateShareNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update share name unauthorized response has a 3xx status code
func (o *UpdateShareNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update share name unauthorized response has a 4xx status code
func (o *UpdateShareNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update share name unauthorized response has a 5xx status code
func (o *UpdateShareNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update share name unauthorized response a status code equal to that given
func (o *UpdateShareNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update share name unauthorized response
func (o *UpdateShareNameUnauthorized) Code() int {
	return 401
}

func (o *UpdateShareNameUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /share/name][%d] updateShareNameUnauthorized ", 401)
}

func (o *UpdateShareNameUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /share/name][%d] updateShareNameUnauthorized ", 401)
}

func (o *UpdateShareNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateShareNameNotFound creates a UpdateShareNameNotFound with default headers values
func NewUpdateShareNameNotFound() *UpdateShareNameNotFound {
	return &UpdateShareNameNotFound{}
}

/*
UpdateShareNameNotFound describes a response with status code 404, with default header values.

name not found
*/
type UpdateShareNameNotFound struct {
}

// IsSuccess returns true when this update share name not found response has a 2xx status code
func (o *UpdateShareNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update share name not found response has a 3xx status code
func (o *UpdateShareNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update share name not found response has a 4xx status code
func (o *UpdateShareNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update share name not found response has a 5xx status code
func (o *UpdateShareNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update share name not found response a status code equal to that given
func (o *UpdateShareNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update share name not found response
func (o *UpdateShareNameNotFound) Code() int {
	return 404
}

func (o *UpdateShareNameNotFound) Error() string {
	return fmt.Sprintf("[PATCH /share/name][%d] updateShareNameNotFound ", 404)
}

func (o *UpdateShareNameNotFound) String() string {
	return fmt.Sprintf("[PATCH /share/name][%d] updateShareNameNotFound ", 404)
}

func (o *UpdateShareNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateShareNameConflict creates a UpdateShareNameConflict with default headers values
func NewUpdateShareNameConflict() *UpdateShareNameConflict {
	return &UpdateShareNameConflict{}
}

/*
UpdateShareNameConflict describes a response with status code 409, with default header values.

conflict - cannot change reservation state
*/
type UpdateShareNameConflict struct {
	Payload rest_model_zrok.ErrorMessage
}

// IsSuccess returns true when this update share name conflict response has a 2xx status code
func (o *UpdateShareNameConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update share name conflict response has a 3xx status code
func (o *UpdateShareNameConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update share name conflict response has a 4xx status code
func (o *UpdateShareNameConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update share name conflict response has a 5xx status code
func (o *UpdateShareNameConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update share name conflict response a status code equal to that given
func (o *UpdateShareNameConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update share name conflict response
func (o *UpdateShareNameConflict) Code() int {
	return 409
}

func (o *UpdateShareNameConflict) Error() string {
	return fmt.Sprintf("[PATCH /share/name][%d] updateShareNameConflict  %+v", 409, o.Payload)
}

func (o *UpdateShareNameConflict) String() string {
	return fmt.Sprintf("[PATCH /share/name][%d] updateShareNameConflict  %+v", 409, o.Payload)
}

func (o *UpdateShareNameConflict) GetPayload() rest_model_zrok.ErrorMessage {
	return o.Payload
}

func (o *UpdateShareNameConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShareNameInternalServerError creates a UpdateShareNameInternalServerError with default headers values
func NewUpdateShareNameInternalServerError() *UpdateShareNameInternalServerError {
	return &UpdateShareNameInternalServerError{}
}

/*
UpdateShareNameInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type UpdateShareNameInternalServerError struct {
}

// IsSuccess returns true when this update share name internal server error response has a 2xx status code
func (o *UpdateShareNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update share name internal server error response has a 3xx status code
func (o *UpdateShareNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update share name internal server error response has a 4xx status code
func (o *UpdateShareNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update share name internal server error response has a 5xx status code
func (o *UpdateShareNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update share name internal server error response a status code equal to that given
func (o *UpdateShareNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update share name internal server error response
func (o *UpdateShareNameInternalServerError) Code() int {
	return 500
}

func (o *UpdateShareNameInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /share/name][%d] updateShareNameInternalServerError ", 500)
}

func (o *UpdateShareNameInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /share/name][%d] updateShareNameInternalServerError ", 500)
}

func (o *UpdateShareNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UpdateShareNameBody update share name body
swagger:model UpdateShareNameBody
*/
type UpdateShareNameBody struct {

	// name
	Name string `json:"name,omitempty"`

	// namespace token
	NamespaceToken string `json:"namespaceToken,omitempty"`

	// whether the name should be reserved (true) or released (false)
	Reserved bool `json:"reserved,omitempty"`
}

// Validate validates this update share name body
func (o *UpdateShareNameBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update share name body based on context it is used
func (o *UpdateShareNameBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateShareNameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateShareNameBody) UnmarshalBinary(b []byte) error {
	var res UpdateShareNameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
