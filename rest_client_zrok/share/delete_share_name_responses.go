// Code generated by go-swagger; DO NOT EDIT.

package share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteShareNameReader is a Reader for the DeleteShareName structure.
type DeleteShareNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteShareNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteShareNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteShareNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteShareNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteShareNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /share/name] deleteShareName", response, response.Code())
	}
}

// NewDeleteShareNameOK creates a DeleteShareNameOK with default headers values
func NewDeleteShareNameOK() *DeleteShareNameOK {
	return &DeleteShareNameOK{}
}

/*
DeleteShareNameOK describes a response with status code 200, with default header values.

name deleted
*/
type DeleteShareNameOK struct {
}

// IsSuccess returns true when this delete share name o k response has a 2xx status code
func (o *DeleteShareNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete share name o k response has a 3xx status code
func (o *DeleteShareNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete share name o k response has a 4xx status code
func (o *DeleteShareNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete share name o k response has a 5xx status code
func (o *DeleteShareNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete share name o k response a status code equal to that given
func (o *DeleteShareNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete share name o k response
func (o *DeleteShareNameOK) Code() int {
	return 200
}

func (o *DeleteShareNameOK) Error() string {
	return fmt.Sprintf("[DELETE /share/name][%d] deleteShareNameOK ", 200)
}

func (o *DeleteShareNameOK) String() string {
	return fmt.Sprintf("[DELETE /share/name][%d] deleteShareNameOK ", 200)
}

func (o *DeleteShareNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteShareNameUnauthorized creates a DeleteShareNameUnauthorized with default headers values
func NewDeleteShareNameUnauthorized() *DeleteShareNameUnauthorized {
	return &DeleteShareNameUnauthorized{}
}

/*
DeleteShareNameUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DeleteShareNameUnauthorized struct {
}

// IsSuccess returns true when this delete share name unauthorized response has a 2xx status code
func (o *DeleteShareNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete share name unauthorized response has a 3xx status code
func (o *DeleteShareNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete share name unauthorized response has a 4xx status code
func (o *DeleteShareNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete share name unauthorized response has a 5xx status code
func (o *DeleteShareNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete share name unauthorized response a status code equal to that given
func (o *DeleteShareNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete share name unauthorized response
func (o *DeleteShareNameUnauthorized) Code() int {
	return 401
}

func (o *DeleteShareNameUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /share/name][%d] deleteShareNameUnauthorized ", 401)
}

func (o *DeleteShareNameUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /share/name][%d] deleteShareNameUnauthorized ", 401)
}

func (o *DeleteShareNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteShareNameNotFound creates a DeleteShareNameNotFound with default headers values
func NewDeleteShareNameNotFound() *DeleteShareNameNotFound {
	return &DeleteShareNameNotFound{}
}

/*
DeleteShareNameNotFound describes a response with status code 404, with default header values.

name not found
*/
type DeleteShareNameNotFound struct {
}

// IsSuccess returns true when this delete share name not found response has a 2xx status code
func (o *DeleteShareNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete share name not found response has a 3xx status code
func (o *DeleteShareNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete share name not found response has a 4xx status code
func (o *DeleteShareNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete share name not found response has a 5xx status code
func (o *DeleteShareNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete share name not found response a status code equal to that given
func (o *DeleteShareNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete share name not found response
func (o *DeleteShareNameNotFound) Code() int {
	return 404
}

func (o *DeleteShareNameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /share/name][%d] deleteShareNameNotFound ", 404)
}

func (o *DeleteShareNameNotFound) String() string {
	return fmt.Sprintf("[DELETE /share/name][%d] deleteShareNameNotFound ", 404)
}

func (o *DeleteShareNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteShareNameInternalServerError creates a DeleteShareNameInternalServerError with default headers values
func NewDeleteShareNameInternalServerError() *DeleteShareNameInternalServerError {
	return &DeleteShareNameInternalServerError{}
}

/*
DeleteShareNameInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type DeleteShareNameInternalServerError struct {
}

// IsSuccess returns true when this delete share name internal server error response has a 2xx status code
func (o *DeleteShareNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete share name internal server error response has a 3xx status code
func (o *DeleteShareNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete share name internal server error response has a 4xx status code
func (o *DeleteShareNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete share name internal server error response has a 5xx status code
func (o *DeleteShareNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete share name internal server error response a status code equal to that given
func (o *DeleteShareNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete share name internal server error response
func (o *DeleteShareNameInternalServerError) Code() int {
	return 500
}

func (o *DeleteShareNameInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /share/name][%d] deleteShareNameInternalServerError ", 500)
}

func (o *DeleteShareNameInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /share/name][%d] deleteShareNameInternalServerError ", 500)
}

func (o *DeleteShareNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
DeleteShareNameBody delete share name body
swagger:model DeleteShareNameBody
*/
type DeleteShareNameBody struct {

	// name
	Name string `json:"name,omitempty"`

	// namespace token
	NamespaceToken string `json:"namespaceToken,omitempty"`
}

// Validate validates this delete share name body
func (o *DeleteShareNameBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete share name body based on context it is used
func (o *DeleteShareNameBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteShareNameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteShareNameBody) UnmarshalBinary(b []byte) error {
	var res DeleteShareNameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
