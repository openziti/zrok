// Code generated by go-swagger; DO NOT EDIT.

package share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/zrok/rest_model_zrok"
)

// Share12Reader is a Reader for the Share12 structure.
type Share12Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Share12Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewShare12Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewShare12Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewShare12NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewShare12Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewShare12UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewShare12InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /share12] share12", response, response.Code())
	}
}

// NewShare12Created creates a Share12Created with default headers values
func NewShare12Created() *Share12Created {
	return &Share12Created{}
}

/*
Share12Created describes a response with status code 201, with default header values.

share created
*/
type Share12Created struct {
	Payload *rest_model_zrok.ShareResponse
}

// IsSuccess returns true when this share12 created response has a 2xx status code
func (o *Share12Created) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this share12 created response has a 3xx status code
func (o *Share12Created) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share12 created response has a 4xx status code
func (o *Share12Created) IsClientError() bool {
	return false
}

// IsServerError returns true when this share12 created response has a 5xx status code
func (o *Share12Created) IsServerError() bool {
	return false
}

// IsCode returns true when this share12 created response a status code equal to that given
func (o *Share12Created) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the share12 created response
func (o *Share12Created) Code() int {
	return 201
}

func (o *Share12Created) Error() string {
	return fmt.Sprintf("[POST /share12][%d] share12Created  %+v", 201, o.Payload)
}

func (o *Share12Created) String() string {
	return fmt.Sprintf("[POST /share12][%d] share12Created  %+v", 201, o.Payload)
}

func (o *Share12Created) GetPayload() *rest_model_zrok.ShareResponse {
	return o.Payload
}

func (o *Share12Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model_zrok.ShareResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewShare12Unauthorized creates a Share12Unauthorized with default headers values
func NewShare12Unauthorized() *Share12Unauthorized {
	return &Share12Unauthorized{}
}

/*
Share12Unauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type Share12Unauthorized struct {
}

// IsSuccess returns true when this share12 unauthorized response has a 2xx status code
func (o *Share12Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share12 unauthorized response has a 3xx status code
func (o *Share12Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share12 unauthorized response has a 4xx status code
func (o *Share12Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this share12 unauthorized response has a 5xx status code
func (o *Share12Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this share12 unauthorized response a status code equal to that given
func (o *Share12Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the share12 unauthorized response
func (o *Share12Unauthorized) Code() int {
	return 401
}

func (o *Share12Unauthorized) Error() string {
	return fmt.Sprintf("[POST /share12][%d] share12Unauthorized ", 401)
}

func (o *Share12Unauthorized) String() string {
	return fmt.Sprintf("[POST /share12][%d] share12Unauthorized ", 401)
}

func (o *Share12Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewShare12NotFound creates a Share12NotFound with default headers values
func NewShare12NotFound() *Share12NotFound {
	return &Share12NotFound{}
}

/*
Share12NotFound describes a response with status code 404, with default header values.

not found
*/
type Share12NotFound struct {
}

// IsSuccess returns true when this share12 not found response has a 2xx status code
func (o *Share12NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share12 not found response has a 3xx status code
func (o *Share12NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share12 not found response has a 4xx status code
func (o *Share12NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this share12 not found response has a 5xx status code
func (o *Share12NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this share12 not found response a status code equal to that given
func (o *Share12NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the share12 not found response
func (o *Share12NotFound) Code() int {
	return 404
}

func (o *Share12NotFound) Error() string {
	return fmt.Sprintf("[POST /share12][%d] share12NotFound ", 404)
}

func (o *Share12NotFound) String() string {
	return fmt.Sprintf("[POST /share12][%d] share12NotFound ", 404)
}

func (o *Share12NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewShare12Conflict creates a Share12Conflict with default headers values
func NewShare12Conflict() *Share12Conflict {
	return &Share12Conflict{}
}

/*
Share12Conflict describes a response with status code 409, with default header values.

conflict
*/
type Share12Conflict struct {
	Payload rest_model_zrok.ErrorMessage
}

// IsSuccess returns true when this share12 conflict response has a 2xx status code
func (o *Share12Conflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share12 conflict response has a 3xx status code
func (o *Share12Conflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share12 conflict response has a 4xx status code
func (o *Share12Conflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this share12 conflict response has a 5xx status code
func (o *Share12Conflict) IsServerError() bool {
	return false
}

// IsCode returns true when this share12 conflict response a status code equal to that given
func (o *Share12Conflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the share12 conflict response
func (o *Share12Conflict) Code() int {
	return 409
}

func (o *Share12Conflict) Error() string {
	return fmt.Sprintf("[POST /share12][%d] share12Conflict  %+v", 409, o.Payload)
}

func (o *Share12Conflict) String() string {
	return fmt.Sprintf("[POST /share12][%d] share12Conflict  %+v", 409, o.Payload)
}

func (o *Share12Conflict) GetPayload() rest_model_zrok.ErrorMessage {
	return o.Payload
}

func (o *Share12Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewShare12UnprocessableEntity creates a Share12UnprocessableEntity with default headers values
func NewShare12UnprocessableEntity() *Share12UnprocessableEntity {
	return &Share12UnprocessableEntity{}
}

/*
Share12UnprocessableEntity describes a response with status code 422, with default header values.

unprocessable
*/
type Share12UnprocessableEntity struct {
}

// IsSuccess returns true when this share12 unprocessable entity response has a 2xx status code
func (o *Share12UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share12 unprocessable entity response has a 3xx status code
func (o *Share12UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share12 unprocessable entity response has a 4xx status code
func (o *Share12UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this share12 unprocessable entity response has a 5xx status code
func (o *Share12UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this share12 unprocessable entity response a status code equal to that given
func (o *Share12UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the share12 unprocessable entity response
func (o *Share12UnprocessableEntity) Code() int {
	return 422
}

func (o *Share12UnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /share12][%d] share12UnprocessableEntity ", 422)
}

func (o *Share12UnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /share12][%d] share12UnprocessableEntity ", 422)
}

func (o *Share12UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewShare12InternalServerError creates a Share12InternalServerError with default headers values
func NewShare12InternalServerError() *Share12InternalServerError {
	return &Share12InternalServerError{}
}

/*
Share12InternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type Share12InternalServerError struct {
	Payload rest_model_zrok.ErrorMessage
}

// IsSuccess returns true when this share12 internal server error response has a 2xx status code
func (o *Share12InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share12 internal server error response has a 3xx status code
func (o *Share12InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share12 internal server error response has a 4xx status code
func (o *Share12InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this share12 internal server error response has a 5xx status code
func (o *Share12InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this share12 internal server error response a status code equal to that given
func (o *Share12InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the share12 internal server error response
func (o *Share12InternalServerError) Code() int {
	return 500
}

func (o *Share12InternalServerError) Error() string {
	return fmt.Sprintf("[POST /share12][%d] share12InternalServerError  %+v", 500, o.Payload)
}

func (o *Share12InternalServerError) String() string {
	return fmt.Sprintf("[POST /share12][%d] share12InternalServerError  %+v", 500, o.Payload)
}

func (o *Share12InternalServerError) GetPayload() rest_model_zrok.ErrorMessage {
	return o.Payload
}

func (o *Share12InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
