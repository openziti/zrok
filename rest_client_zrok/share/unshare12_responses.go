// Code generated by go-swagger; DO NOT EDIT.

package share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// Unshare12Reader is a Reader for the Unshare12 structure.
type Unshare12Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Unshare12Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUnshare12OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUnshare12Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUnshare12NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUnshare12InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /unshare12] unshare12", response, response.Code())
	}
}

// NewUnshare12OK creates a Unshare12OK with default headers values
func NewUnshare12OK() *Unshare12OK {
	return &Unshare12OK{}
}

/*
Unshare12OK describes a response with status code 200, with default header values.

share removed
*/
type Unshare12OK struct {
}

// IsSuccess returns true when this unshare12 o k response has a 2xx status code
func (o *Unshare12OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this unshare12 o k response has a 3xx status code
func (o *Unshare12OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unshare12 o k response has a 4xx status code
func (o *Unshare12OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this unshare12 o k response has a 5xx status code
func (o *Unshare12OK) IsServerError() bool {
	return false
}

// IsCode returns true when this unshare12 o k response a status code equal to that given
func (o *Unshare12OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the unshare12 o k response
func (o *Unshare12OK) Code() int {
	return 200
}

func (o *Unshare12OK) Error() string {
	return fmt.Sprintf("[DELETE /unshare12][%d] unshare12OK ", 200)
}

func (o *Unshare12OK) String() string {
	return fmt.Sprintf("[DELETE /unshare12][%d] unshare12OK ", 200)
}

func (o *Unshare12OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUnshare12Unauthorized creates a Unshare12Unauthorized with default headers values
func NewUnshare12Unauthorized() *Unshare12Unauthorized {
	return &Unshare12Unauthorized{}
}

/*
Unshare12Unauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type Unshare12Unauthorized struct {
}

// IsSuccess returns true when this unshare12 unauthorized response has a 2xx status code
func (o *Unshare12Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unshare12 unauthorized response has a 3xx status code
func (o *Unshare12Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unshare12 unauthorized response has a 4xx status code
func (o *Unshare12Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this unshare12 unauthorized response has a 5xx status code
func (o *Unshare12Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this unshare12 unauthorized response a status code equal to that given
func (o *Unshare12Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the unshare12 unauthorized response
func (o *Unshare12Unauthorized) Code() int {
	return 401
}

func (o *Unshare12Unauthorized) Error() string {
	return fmt.Sprintf("[DELETE /unshare12][%d] unshare12Unauthorized ", 401)
}

func (o *Unshare12Unauthorized) String() string {
	return fmt.Sprintf("[DELETE /unshare12][%d] unshare12Unauthorized ", 401)
}

func (o *Unshare12Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUnshare12NotFound creates a Unshare12NotFound with default headers values
func NewUnshare12NotFound() *Unshare12NotFound {
	return &Unshare12NotFound{}
}

/*
Unshare12NotFound describes a response with status code 404, with default header values.

not found
*/
type Unshare12NotFound struct {
}

// IsSuccess returns true when this unshare12 not found response has a 2xx status code
func (o *Unshare12NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unshare12 not found response has a 3xx status code
func (o *Unshare12NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unshare12 not found response has a 4xx status code
func (o *Unshare12NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this unshare12 not found response has a 5xx status code
func (o *Unshare12NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this unshare12 not found response a status code equal to that given
func (o *Unshare12NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the unshare12 not found response
func (o *Unshare12NotFound) Code() int {
	return 404
}

func (o *Unshare12NotFound) Error() string {
	return fmt.Sprintf("[DELETE /unshare12][%d] unshare12NotFound ", 404)
}

func (o *Unshare12NotFound) String() string {
	return fmt.Sprintf("[DELETE /unshare12][%d] unshare12NotFound ", 404)
}

func (o *Unshare12NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUnshare12InternalServerError creates a Unshare12InternalServerError with default headers values
func NewUnshare12InternalServerError() *Unshare12InternalServerError {
	return &Unshare12InternalServerError{}
}

/*
Unshare12InternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type Unshare12InternalServerError struct {
	Payload rest_model_zrok.ErrorMessage
}

// IsSuccess returns true when this unshare12 internal server error response has a 2xx status code
func (o *Unshare12InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unshare12 internal server error response has a 3xx status code
func (o *Unshare12InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unshare12 internal server error response has a 4xx status code
func (o *Unshare12InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this unshare12 internal server error response has a 5xx status code
func (o *Unshare12InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this unshare12 internal server error response a status code equal to that given
func (o *Unshare12InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the unshare12 internal server error response
func (o *Unshare12InternalServerError) Code() int {
	return 500
}

func (o *Unshare12InternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /unshare12][%d] unshare12InternalServerError  %+v", 500, o.Payload)
}

func (o *Unshare12InternalServerError) String() string {
	return fmt.Sprintf("[DELETE /unshare12][%d] unshare12InternalServerError  %+v", 500, o.Payload)
}

func (o *Unshare12InternalServerError) GetPayload() rest_model_zrok.ErrorMessage {
	return o.Payload
}

func (o *Unshare12InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
Unshare12Body unshare12 body
swagger:model Unshare12Body
*/
type Unshare12Body struct {

	// env z Id
	EnvZID string `json:"envZId,omitempty"`

	// share token
	ShareToken string `json:"shareToken,omitempty"`
}

// Validate validates this unshare12 body
func (o *Unshare12Body) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this unshare12 body based on context it is used
func (o *Unshare12Body) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *Unshare12Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *Unshare12Body) UnmarshalBinary(b []byte) error {
	var res Unshare12Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
