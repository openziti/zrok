/* tslint:disable */
/* eslint-disable */
/**
 * zrok
 * zrok client access
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFrontend201Response,
  Enroll200Response,
  EnrollRequest,
  Ping200Response,
  RemoteAccessRequest,
  RemoteShare200Response,
  RemoteShareRequest,
  RemoteStatus200Response,
  RemoteUnaccessRequest,
  RemoteUnshareRequest,
  ShareHttpHealthcheck200Response,
  ShareHttpHealthcheckRequest,
} from '../models/index';
import {
    CreateFrontend201ResponseFromJSON,
    CreateFrontend201ResponseToJSON,
    Enroll200ResponseFromJSON,
    Enroll200ResponseToJSON,
    EnrollRequestFromJSON,
    EnrollRequestToJSON,
    Ping200ResponseFromJSON,
    Ping200ResponseToJSON,
    RemoteAccessRequestFromJSON,
    RemoteAccessRequestToJSON,
    RemoteShare200ResponseFromJSON,
    RemoteShare200ResponseToJSON,
    RemoteShareRequestFromJSON,
    RemoteShareRequestToJSON,
    RemoteStatus200ResponseFromJSON,
    RemoteStatus200ResponseToJSON,
    RemoteUnaccessRequestFromJSON,
    RemoteUnaccessRequestToJSON,
    RemoteUnshareRequestFromJSON,
    RemoteUnshareRequestToJSON,
    ShareHttpHealthcheck200ResponseFromJSON,
    ShareHttpHealthcheck200ResponseToJSON,
    ShareHttpHealthcheckRequestFromJSON,
    ShareHttpHealthcheckRequestToJSON,
} from '../models/index';

export interface EnrollOperationRequest {
    body?: EnrollRequest;
}

export interface PingRequest {
    body?: EnrollRequest;
}

export interface RemoteAccessOperationRequest {
    body?: RemoteAccessRequest;
}

export interface RemoteShareOperationRequest {
    body?: RemoteShareRequest;
}

export interface RemoteStatusRequest {
    body?: EnrollRequest;
}

export interface RemoteUnaccessOperationRequest {
    body?: RemoteUnaccessRequest;
}

export interface RemoteUnshareOperationRequest {
    body?: RemoteUnshareRequest;
}

export interface ShareHttpHealthcheckOperationRequest {
    body?: ShareHttpHealthcheckRequest;
}

export interface UnenrollRequest {
    body?: EnrollRequest;
}

/**
 * 
 */
export class AgentApi extends runtime.BaseAPI {

    /**
     */
    async enrollRaw(requestParameters: EnrollOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Enroll200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/agent/enroll`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Enroll200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async enroll(requestParameters: EnrollOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Enroll200Response> {
        const response = await this.enrollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pingRaw(requestParameters: PingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ping200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/agent/ping`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Ping200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async ping(requestParameters: PingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ping200Response> {
        const response = await this.pingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async remoteAccessRaw(requestParameters: RemoteAccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFrontend201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/agent/access`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoteAccessRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFrontend201ResponseFromJSON(jsonValue));
    }

    /**
     */
    async remoteAccess(requestParameters: RemoteAccessOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFrontend201Response> {
        const response = await this.remoteAccessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async remoteShareRaw(requestParameters: RemoteShareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoteShare200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/agent/share`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoteShareRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoteShare200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async remoteShare(requestParameters: RemoteShareOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoteShare200Response> {
        const response = await this.remoteShareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async remoteStatusRaw(requestParameters: RemoteStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoteStatus200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/agent/status`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoteStatus200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async remoteStatus(requestParameters: RemoteStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoteStatus200Response> {
        const response = await this.remoteStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async remoteUnaccessRaw(requestParameters: RemoteUnaccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/agent/unaccess`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoteUnaccessRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async remoteUnaccess(requestParameters: RemoteUnaccessOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.remoteUnaccessRaw(requestParameters, initOverrides);
    }

    /**
     */
    async remoteUnshareRaw(requestParameters: RemoteUnshareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/agent/unshare`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoteUnshareRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async remoteUnshare(requestParameters: RemoteUnshareOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.remoteUnshareRaw(requestParameters, initOverrides);
    }

    /**
     */
    async shareHttpHealthcheckRaw(requestParameters: ShareHttpHealthcheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareHttpHealthcheck200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/agent/share/http-healthcheck`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShareHttpHealthcheckRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareHttpHealthcheck200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async shareHttpHealthcheck(requestParameters: ShareHttpHealthcheckOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareHttpHealthcheck200Response> {
        const response = await this.shareHttpHealthcheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unenrollRaw(requestParameters: UnenrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/agent/unenroll`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unenroll(requestParameters: UnenrollRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unenrollRaw(requestParameters, initOverrides);
    }

}
