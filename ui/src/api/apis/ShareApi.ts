/* tslint:disable */
/* eslint-disable */
/**
 * zrok
 * zrok client access
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Access201Response,
  AccessRequest,
  CreateShareNameRequest,
  ListAllShareNames200ResponseInner,
  ListShareNames200ResponseInner,
  ShareRequest,
  ShareRequest12,
  ShareResponse,
  UnaccessRequest,
  Unshare12Request,
  UnshareRequest,
  UpdateAccessRequest,
  UpdateShareRequest,
} from '../models/index';
import {
    Access201ResponseFromJSON,
    Access201ResponseToJSON,
    AccessRequestFromJSON,
    AccessRequestToJSON,
    CreateShareNameRequestFromJSON,
    CreateShareNameRequestToJSON,
    ListAllShareNames200ResponseInnerFromJSON,
    ListAllShareNames200ResponseInnerToJSON,
    ListShareNames200ResponseInnerFromJSON,
    ListShareNames200ResponseInnerToJSON,
    ShareRequestFromJSON,
    ShareRequestToJSON,
    ShareRequest12FromJSON,
    ShareRequest12ToJSON,
    ShareResponseFromJSON,
    ShareResponseToJSON,
    UnaccessRequestFromJSON,
    UnaccessRequestToJSON,
    Unshare12RequestFromJSON,
    Unshare12RequestToJSON,
    UnshareRequestFromJSON,
    UnshareRequestToJSON,
    UpdateAccessRequestFromJSON,
    UpdateAccessRequestToJSON,
    UpdateShareRequestFromJSON,
    UpdateShareRequestToJSON,
} from '../models/index';

export interface AccessOperationRequest {
    body?: AccessRequest;
}

export interface CreateShareNameOperationRequest {
    body?: CreateShareNameRequest;
}

export interface DeleteShareNameRequest {
    body?: CreateShareNameRequest;
}

export interface ListShareNamesRequest {
    namespaceToken: string;
}

export interface ShareOperationRequest {
    body?: ShareRequest;
}

export interface Share12Request {
    body?: ShareRequest12;
}

export interface UnaccessOperationRequest {
    body?: UnaccessRequest;
}

export interface UnshareOperationRequest {
    body?: UnshareRequest;
}

export interface Unshare12OperationRequest {
    body?: Unshare12Request;
}

export interface UpdateAccessOperationRequest {
    body?: UpdateAccessRequest;
}

export interface UpdateShareOperationRequest {
    body?: UpdateShareRequest;
}

/**
 * 
 */
export class ShareApi extends runtime.BaseAPI {

    /**
     */
    async accessRaw(requestParameters: AccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Access201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/access`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccessRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Access201ResponseFromJSON(jsonValue));
    }

    /**
     */
    async access(requestParameters: AccessOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Access201Response> {
        const response = await this.accessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createShareNameRaw(requestParameters: CreateShareNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/share/name`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateShareNameRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createShareName(requestParameters: CreateShareNameOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createShareNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteShareNameRaw(requestParameters: DeleteShareNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/share/name`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CreateShareNameRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteShareName(requestParameters: DeleteShareNameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShareNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async listAllShareNamesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListAllShareNames200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/share/names`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListAllShareNames200ResponseInnerFromJSON));
    }

    /**
     */
    async listAllShareNames(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListAllShareNames200ResponseInner>> {
        const response = await this.listAllShareNamesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listShareNamesRaw(requestParameters: ListShareNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListShareNames200ResponseInner>>> {
        if (requestParameters['namespaceToken'] == null) {
            throw new runtime.RequiredError(
                'namespaceToken',
                'Required parameter "namespaceToken" was null or undefined when calling listShareNames().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/share/names/{namespaceToken}`;
        urlPath = urlPath.replace(`{${"namespaceToken"}}`, encodeURIComponent(String(requestParameters['namespaceToken'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListShareNames200ResponseInnerFromJSON));
    }

    /**
     */
    async listShareNames(requestParameters: ListShareNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListShareNames200ResponseInner>> {
        const response = await this.listShareNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async shareRaw(requestParameters: ShareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/share`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShareRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareResponseFromJSON(jsonValue));
    }

    /**
     */
    async share(requestParameters: ShareOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareResponse> {
        const response = await this.shareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async share12Raw(requestParameters: Share12Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/share12`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShareRequest12ToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareResponseFromJSON(jsonValue));
    }

    /**
     */
    async share12(requestParameters: Share12Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareResponse> {
        const response = await this.share12Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unaccessRaw(requestParameters: UnaccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/unaccess`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UnaccessRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unaccess(requestParameters: UnaccessOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unaccessRaw(requestParameters, initOverrides);
    }

    /**
     */
    async unshareRaw(requestParameters: UnshareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/unshare`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UnshareRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unshare(requestParameters: UnshareOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unshareRaw(requestParameters, initOverrides);
    }

    /**
     */
    async unshare12Raw(requestParameters: Unshare12OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/unshare12`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: Unshare12RequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unshare12(requestParameters: Unshare12OperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unshare12Raw(requestParameters, initOverrides);
    }

    /**
     */
    async updateAccessRaw(requestParameters: UpdateAccessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/access`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccessRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateAccess(requestParameters: UpdateAccessOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAccessRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateShareRaw(requestParameters: UpdateShareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/share`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateShareRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateShare(requestParameters: UpdateShareOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateShareRaw(requestParameters, initOverrides);
    }

}
