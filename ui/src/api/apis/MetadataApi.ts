/* tslint:disable */
/* eslint-disable */
/**
 * zrok
 * zrok client access
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientVersionCheckRequest,
  Environment,
  EnvironmentAndResources,
  Frontend,
  GetSparklines200Response,
  GetSparklinesRequest,
  ListMemberships200Response,
  ListOrganizationMembers200Response,
  ListPublicFrontendsForAccount200Response,
  Metrics,
  ModelConfiguration,
  Overview,
  Share,
  VersionInventory200Response,
} from '../models/index';
import {
    ClientVersionCheckRequestFromJSON,
    ClientVersionCheckRequestToJSON,
    EnvironmentFromJSON,
    EnvironmentToJSON,
    EnvironmentAndResourcesFromJSON,
    EnvironmentAndResourcesToJSON,
    FrontendFromJSON,
    FrontendToJSON,
    GetSparklines200ResponseFromJSON,
    GetSparklines200ResponseToJSON,
    GetSparklinesRequestFromJSON,
    GetSparklinesRequestToJSON,
    ListMemberships200ResponseFromJSON,
    ListMemberships200ResponseToJSON,
    ListOrganizationMembers200ResponseFromJSON,
    ListOrganizationMembers200ResponseToJSON,
    ListPublicFrontendsForAccount200ResponseFromJSON,
    ListPublicFrontendsForAccount200ResponseToJSON,
    MetricsFromJSON,
    MetricsToJSON,
    ModelConfigurationFromJSON,
    ModelConfigurationToJSON,
    OverviewFromJSON,
    OverviewToJSON,
    ShareFromJSON,
    ShareToJSON,
    VersionInventory200ResponseFromJSON,
    VersionInventory200ResponseToJSON,
} from '../models/index';

export interface ClientVersionCheckOperationRequest {
    body?: ClientVersionCheckRequest;
}

export interface GetAccountMetricsRequest {
    duration?: string;
}

export interface GetEnvironmentDetailRequest {
    envZId: string;
}

export interface GetEnvironmentMetricsRequest {
    envId: string;
    duration?: string;
}

export interface GetFrontendDetailRequest {
    frontendId: number;
}

export interface GetShareDetailRequest {
    shareToken: string;
}

export interface GetShareMetricsRequest {
    shareToken: string;
    duration?: string;
}

export interface GetSparklinesOperationRequest {
    body?: GetSparklinesRequest;
}

export interface ListOrgMembersRequest {
    organizationToken: string;
}

export interface OrgAccountOverviewRequest {
    organizationToken: string;
    accountEmail: string;
}

/**
 * 
 */
export class MetadataApi extends runtime.BaseAPI {

    /**
     */
    async _configurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelConfiguration>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/configuration`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async _configuration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelConfiguration> {
        const response = await this._configurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async clientVersionCheckRaw(requestParameters: ClientVersionCheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';


        let urlPath = `/clientVersionCheck`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientVersionCheckRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clientVersionCheck(requestParameters: ClientVersionCheckOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.clientVersionCheckRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAccountDetailRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Environment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/detail/account`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EnvironmentFromJSON));
    }

    /**
     */
    async getAccountDetail(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Environment>> {
        const response = await this.getAccountDetailRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountMetricsRaw(requestParameters: GetAccountMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Metrics>> {
        const queryParameters: any = {};

        if (requestParameters['duration'] != null) {
            queryParameters['duration'] = requestParameters['duration'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/metrics/account`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsFromJSON(jsonValue));
    }

    /**
     */
    async getAccountMetrics(requestParameters: GetAccountMetricsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Metrics> {
        const response = await this.getAccountMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getEnvironmentDetailRaw(requestParameters: GetEnvironmentDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnvironmentAndResources>> {
        if (requestParameters['envZId'] == null) {
            throw new runtime.RequiredError(
                'envZId',
                'Required parameter "envZId" was null or undefined when calling getEnvironmentDetail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/detail/environment/{envZId}`;
        urlPath = urlPath.replace(`{${"envZId"}}`, encodeURIComponent(String(requestParameters['envZId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentAndResourcesFromJSON(jsonValue));
    }

    /**
     */
    async getEnvironmentDetail(requestParameters: GetEnvironmentDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnvironmentAndResources> {
        const response = await this.getEnvironmentDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getEnvironmentMetricsRaw(requestParameters: GetEnvironmentMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Metrics>> {
        if (requestParameters['envId'] == null) {
            throw new runtime.RequiredError(
                'envId',
                'Required parameter "envId" was null or undefined when calling getEnvironmentMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['duration'] != null) {
            queryParameters['duration'] = requestParameters['duration'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/metrics/environment/{envId}`;
        urlPath = urlPath.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters['envId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsFromJSON(jsonValue));
    }

    /**
     */
    async getEnvironmentMetrics(requestParameters: GetEnvironmentMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Metrics> {
        const response = await this.getEnvironmentMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFrontendDetailRaw(requestParameters: GetFrontendDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Frontend>> {
        if (requestParameters['frontendId'] == null) {
            throw new runtime.RequiredError(
                'frontendId',
                'Required parameter "frontendId" was null or undefined when calling getFrontendDetail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/detail/frontend/{frontendId}`;
        urlPath = urlPath.replace(`{${"frontendId"}}`, encodeURIComponent(String(requestParameters['frontendId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FrontendFromJSON(jsonValue));
    }

    /**
     */
    async getFrontendDetail(requestParameters: GetFrontendDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Frontend> {
        const response = await this.getFrontendDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getShareDetailRaw(requestParameters: GetShareDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Share>> {
        if (requestParameters['shareToken'] == null) {
            throw new runtime.RequiredError(
                'shareToken',
                'Required parameter "shareToken" was null or undefined when calling getShareDetail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/detail/share/{shareToken}`;
        urlPath = urlPath.replace(`{${"shareToken"}}`, encodeURIComponent(String(requestParameters['shareToken'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareFromJSON(jsonValue));
    }

    /**
     */
    async getShareDetail(requestParameters: GetShareDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Share> {
        const response = await this.getShareDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getShareMetricsRaw(requestParameters: GetShareMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Metrics>> {
        if (requestParameters['shareToken'] == null) {
            throw new runtime.RequiredError(
                'shareToken',
                'Required parameter "shareToken" was null or undefined when calling getShareMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['duration'] != null) {
            queryParameters['duration'] = requestParameters['duration'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/metrics/share/{shareToken}`;
        urlPath = urlPath.replace(`{${"shareToken"}}`, encodeURIComponent(String(requestParameters['shareToken'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsFromJSON(jsonValue));
    }

    /**
     */
    async getShareMetrics(requestParameters: GetShareMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Metrics> {
        const response = await this.getShareMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSparklinesRaw(requestParameters: GetSparklinesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSparklines200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/zrok.v1+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/sparklines`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetSparklinesRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSparklines200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getSparklines(requestParameters: GetSparklinesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSparklines200Response> {
        const response = await this.getSparklinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listMembershipsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListMemberships200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/memberships`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListMemberships200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async listMemberships(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListMemberships200Response> {
        const response = await this.listMembershipsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listOrgMembersRaw(requestParameters: ListOrgMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOrganizationMembers200Response>> {
        if (requestParameters['organizationToken'] == null) {
            throw new runtime.RequiredError(
                'organizationToken',
                'Required parameter "organizationToken" was null or undefined when calling listOrgMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/members/{organizationToken}`;
        urlPath = urlPath.replace(`{${"organizationToken"}}`, encodeURIComponent(String(requestParameters['organizationToken'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOrganizationMembers200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async listOrgMembers(requestParameters: ListOrgMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOrganizationMembers200Response> {
        const response = await this.listOrgMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listPublicFrontendsForAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPublicFrontendsForAccount200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/overview/public-frontends`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPublicFrontendsForAccount200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async listPublicFrontendsForAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPublicFrontendsForAccount200Response> {
        const response = await this.listPublicFrontendsForAccountRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async orgAccountOverviewRaw(requestParameters: OrgAccountOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Overview>> {
        if (requestParameters['organizationToken'] == null) {
            throw new runtime.RequiredError(
                'organizationToken',
                'Required parameter "organizationToken" was null or undefined when calling orgAccountOverview().'
            );
        }

        if (requestParameters['accountEmail'] == null) {
            throw new runtime.RequiredError(
                'accountEmail',
                'Required parameter "accountEmail" was null or undefined when calling orgAccountOverview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/overview/{organizationToken}/{accountEmail}`;
        urlPath = urlPath.replace(`{${"organizationToken"}}`, encodeURIComponent(String(requestParameters['organizationToken'])));
        urlPath = urlPath.replace(`{${"accountEmail"}}`, encodeURIComponent(String(requestParameters['accountEmail'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OverviewFromJSON(jsonValue));
    }

    /**
     */
    async orgAccountOverview(requestParameters: OrgAccountOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Overview> {
        const response = await this.orgAccountOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async overviewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Overview>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-token"] = await this.configuration.apiKey("x-token"); // key authentication
        }


        let urlPath = `/overview`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OverviewFromJSON(jsonValue));
    }

    /**
     */
    async overview(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Overview> {
        const response = await this.overviewRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async versionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/version`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async version(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.versionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async versionInventoryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionInventory200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/versions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionInventory200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async versionInventory(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionInventory200Response> {
        const response = await this.versionInventoryRaw(initOverrides);
        return await response.value();
    }

}
