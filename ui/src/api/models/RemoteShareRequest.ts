/* tslint:disable */
/* eslint-disable */
/**
 * zrok
 * zrok client access
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NameSelection } from './NameSelection';
import {
    NameSelectionFromJSON,
    NameSelectionFromJSONTyped,
    NameSelectionToJSON,
    NameSelectionToJSONTyped,
} from './NameSelection';

/**
 * 
 * @export
 * @interface RemoteShareRequest
 */
export interface RemoteShareRequest {
    /**
     * 
     * @type {string}
     * @memberof RemoteShareRequest
     */
    envZId?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteShareRequest
     */
    shareMode?: RemoteShareRequestShareModeEnum;
    /**
     * 
     * @type {string}
     * @memberof RemoteShareRequest
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteShareRequest
     */
    target?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RemoteShareRequest
     */
    basicAuth?: Array<string>;
    /**
     * 
     * @type {Array<NameSelection>}
     * @memberof RemoteShareRequest
     */
    nameSelections?: Array<NameSelection>;
    /**
     * 
     * @type {string}
     * @memberof RemoteShareRequest
     */
    privateShareToken?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteShareRequest
     */
    backendMode?: RemoteShareRequestBackendModeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof RemoteShareRequest
     */
    insecure?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RemoteShareRequest
     */
    oauthProvider?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RemoteShareRequest
     */
    oauthEmailDomains?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RemoteShareRequest
     */
    oauthRefreshInterval?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RemoteShareRequest
     */
    open?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof RemoteShareRequest
     */
    accessGrants?: Array<string>;
}


/**
 * @export
 */
export const RemoteShareRequestShareModeEnum = {
    Public: 'public',
    Private: 'private'
} as const;
export type RemoteShareRequestShareModeEnum = typeof RemoteShareRequestShareModeEnum[keyof typeof RemoteShareRequestShareModeEnum];

/**
 * @export
 */
export const RemoteShareRequestBackendModeEnum = {
    Proxy: 'proxy',
    Web: 'web',
    TcpTunnel: 'tcpTunnel',
    UdpTunnel: 'udpTunnel',
    Caddy: 'caddy',
    Drive: 'drive',
    Socks: 'socks',
    Vpn: 'vpn'
} as const;
export type RemoteShareRequestBackendModeEnum = typeof RemoteShareRequestBackendModeEnum[keyof typeof RemoteShareRequestBackendModeEnum];


/**
 * Check if a given object implements the RemoteShareRequest interface.
 */
export function instanceOfRemoteShareRequest(value: object): value is RemoteShareRequest {
    return true;
}

export function RemoteShareRequestFromJSON(json: any): RemoteShareRequest {
    return RemoteShareRequestFromJSONTyped(json, false);
}

export function RemoteShareRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RemoteShareRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'envZId': json['envZId'] == null ? undefined : json['envZId'],
        'shareMode': json['shareMode'] == null ? undefined : json['shareMode'],
        'token': json['token'] == null ? undefined : json['token'],
        'target': json['target'] == null ? undefined : json['target'],
        'basicAuth': json['basicAuth'] == null ? undefined : json['basicAuth'],
        'nameSelections': json['nameSelections'] == null ? undefined : ((json['nameSelections'] as Array<any>).map(NameSelectionFromJSON)),
        'privateShareToken': json['privateShareToken'] == null ? undefined : json['privateShareToken'],
        'backendMode': json['backendMode'] == null ? undefined : json['backendMode'],
        'insecure': json['insecure'] == null ? undefined : json['insecure'],
        'oauthProvider': json['oauthProvider'] == null ? undefined : json['oauthProvider'],
        'oauthEmailDomains': json['oauthEmailDomains'] == null ? undefined : json['oauthEmailDomains'],
        'oauthRefreshInterval': json['oauthRefreshInterval'] == null ? undefined : json['oauthRefreshInterval'],
        'open': json['open'] == null ? undefined : json['open'],
        'accessGrants': json['accessGrants'] == null ? undefined : json['accessGrants'],
    };
}

export function RemoteShareRequestToJSON(json: any): RemoteShareRequest {
    return RemoteShareRequestToJSONTyped(json, false);
}

export function RemoteShareRequestToJSONTyped(value?: RemoteShareRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'envZId': value['envZId'],
        'shareMode': value['shareMode'],
        'token': value['token'],
        'target': value['target'],
        'basicAuth': value['basicAuth'],
        'nameSelections': value['nameSelections'] == null ? undefined : ((value['nameSelections'] as Array<any>).map(NameSelectionToJSON)),
        'privateShareToken': value['privateShareToken'],
        'backendMode': value['backendMode'],
        'insecure': value['insecure'],
        'oauthProvider': value['oauthProvider'],
        'oauthEmailDomains': value['oauthEmailDomains'],
        'oauthRefreshInterval': value['oauthRefreshInterval'],
        'open': value['open'],
        'accessGrants': value['accessGrants'],
    };
}

