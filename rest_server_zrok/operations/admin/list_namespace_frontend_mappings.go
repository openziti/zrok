// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// ListNamespaceFrontendMappingsHandlerFunc turns a function with the right signature into a list namespace frontend mappings handler
type ListNamespaceFrontendMappingsHandlerFunc func(ListNamespaceFrontendMappingsParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ListNamespaceFrontendMappingsHandlerFunc) Handle(params ListNamespaceFrontendMappingsParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// ListNamespaceFrontendMappingsHandler interface for that can handle valid list namespace frontend mappings params
type ListNamespaceFrontendMappingsHandler interface {
	Handle(ListNamespaceFrontendMappingsParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewListNamespaceFrontendMappings creates a new http.Handler for the list namespace frontend mappings operation
func NewListNamespaceFrontendMappings(ctx *middleware.Context, handler ListNamespaceFrontendMappingsHandler) *ListNamespaceFrontendMappings {
	return &ListNamespaceFrontendMappings{Context: ctx, Handler: handler}
}

/*
	ListNamespaceFrontendMappings swagger:route GET /namespace/frontend/mapping/{namespaceToken} admin listNamespaceFrontendMappings

ListNamespaceFrontendMappings list namespace frontend mappings API
*/
type ListNamespaceFrontendMappings struct {
	Context *middleware.Context
	Handler ListNamespaceFrontendMappingsHandler
}

func (o *ListNamespaceFrontendMappings) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListNamespaceFrontendMappingsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListNamespaceFrontendMappingsOKBodyItems0 list namespace frontend mappings o k body items0
//
// swagger:model ListNamespaceFrontendMappingsOKBodyItems0
type ListNamespaceFrontendMappingsOKBodyItems0 struct {

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// frontend token
	FrontendToken string `json:"frontendToken,omitempty"`

	// is default
	IsDefault bool `json:"isDefault,omitempty"`

	// namespace token
	NamespaceToken string `json:"namespaceToken,omitempty"`
}

// Validate validates this list namespace frontend mappings o k body items0
func (o *ListNamespaceFrontendMappingsOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list namespace frontend mappings o k body items0 based on context it is used
func (o *ListNamespaceFrontendMappingsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNamespaceFrontendMappingsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNamespaceFrontendMappingsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListNamespaceFrontendMappingsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
