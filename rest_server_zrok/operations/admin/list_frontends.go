// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// ListFrontendsHandlerFunc turns a function with the right signature into a list frontends handler
type ListFrontendsHandlerFunc func(ListFrontendsParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ListFrontendsHandlerFunc) Handle(params ListFrontendsParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// ListFrontendsHandler interface for that can handle valid list frontends params
type ListFrontendsHandler interface {
	Handle(ListFrontendsParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewListFrontends creates a new http.Handler for the list frontends operation
func NewListFrontends(ctx *middleware.Context, handler ListFrontendsHandler) *ListFrontends {
	return &ListFrontends{Context: ctx, Handler: handler}
}

/*
	ListFrontends swagger:route GET /frontends admin listFrontends

ListFrontends list frontends API
*/
type ListFrontends struct {
	Context *middleware.Context
	Handler ListFrontendsHandler
}

func (o *ListFrontends) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListFrontendsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListFrontendsOKBodyItems0 list frontends o k body items0
//
// swagger:model ListFrontendsOKBodyItems0
type ListFrontendsOKBodyItems0 struct {

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// dynamic
	Dynamic bool `json:"dynamic,omitempty"`

	// frontend token
	FrontendToken string `json:"frontendToken,omitempty"`

	// public name
	PublicName string `json:"publicName,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updatedAt,omitempty"`

	// url template
	URLTemplate string `json:"urlTemplate,omitempty"`

	// z Id
	ZID string `json:"zId,omitempty"`
}

// Validate validates this list frontends o k body items0
func (o *ListFrontendsOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list frontends o k body items0 based on context it is used
func (o *ListFrontendsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListFrontendsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListFrontendsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListFrontendsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
