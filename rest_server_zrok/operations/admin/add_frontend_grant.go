// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// AddFrontendGrantHandlerFunc turns a function with the right signature into a add frontend grant handler
type AddFrontendGrantHandlerFunc func(AddFrontendGrantParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn AddFrontendGrantHandlerFunc) Handle(params AddFrontendGrantParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// AddFrontendGrantHandler interface for that can handle valid add frontend grant params
type AddFrontendGrantHandler interface {
	Handle(AddFrontendGrantParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewAddFrontendGrant creates a new http.Handler for the add frontend grant operation
func NewAddFrontendGrant(ctx *middleware.Context, handler AddFrontendGrantHandler) *AddFrontendGrant {
	return &AddFrontendGrant{Context: ctx, Handler: handler}
}

/*
	AddFrontendGrant swagger:route POST /frontend/grant admin addFrontendGrant

AddFrontendGrant add frontend grant API
*/
type AddFrontendGrant struct {
	Context *middleware.Context
	Handler AddFrontendGrantHandler
}

func (o *AddFrontendGrant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddFrontendGrantParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddFrontendGrantBody add frontend grant body
//
// swagger:model AddFrontendGrantBody
type AddFrontendGrantBody struct {

	// email
	Email string `json:"email,omitempty"`

	// frontend token
	FrontendToken string `json:"frontendToken,omitempty"`
}

// Validate validates this add frontend grant body
func (o *AddFrontendGrantBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add frontend grant body based on context it is used
func (o *AddFrontendGrantBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddFrontendGrantBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddFrontendGrantBody) UnmarshalBinary(b []byte) error {
	var res AddFrontendGrantBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
