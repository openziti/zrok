// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// DeleteAccountHandlerFunc turns a function with the right signature into a delete account handler
type DeleteAccountHandlerFunc func(DeleteAccountParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteAccountHandlerFunc) Handle(params DeleteAccountParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteAccountHandler interface for that can handle valid delete account params
type DeleteAccountHandler interface {
	Handle(DeleteAccountParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewDeleteAccount creates a new http.Handler for the delete account operation
func NewDeleteAccount(ctx *middleware.Context, handler DeleteAccountHandler) *DeleteAccount {
	return &DeleteAccount{Context: ctx, Handler: handler}
}

/*
	DeleteAccount swagger:route DELETE /account admin deleteAccount

DeleteAccount delete account API
*/
type DeleteAccount struct {
	Context *middleware.Context
	Handler DeleteAccountHandler
}

func (o *DeleteAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteAccountParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteAccountBody delete account body
//
// swagger:model DeleteAccountBody
type DeleteAccountBody struct {

	// email
	Email string `json:"email,omitempty"`
}

// Validate validates this delete account body
func (o *DeleteAccountBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete account body based on context it is used
func (o *DeleteAccountBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteAccountBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteAccountBody) UnmarshalBinary(b []byte) error {
	var res DeleteAccountBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
