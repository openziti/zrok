// Code generated by go-swagger; DO NOT EDIT.

package share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// ListAllShareNamesHandlerFunc turns a function with the right signature into a list all share names handler
type ListAllShareNamesHandlerFunc func(ListAllShareNamesParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllShareNamesHandlerFunc) Handle(params ListAllShareNamesParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// ListAllShareNamesHandler interface for that can handle valid list all share names params
type ListAllShareNamesHandler interface {
	Handle(ListAllShareNamesParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewListAllShareNames creates a new http.Handler for the list all share names operation
func NewListAllShareNames(ctx *middleware.Context, handler ListAllShareNamesHandler) *ListAllShareNames {
	return &ListAllShareNames{Context: ctx, Handler: handler}
}

/*
	ListAllShareNames swagger:route GET /share/names share listAllShareNames

ListAllShareNames list all share names API
*/
type ListAllShareNames struct {
	Context *middleware.Context
	Handler ListAllShareNamesHandler
}

func (o *ListAllShareNames) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListAllShareNamesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListAllShareNamesOKBodyItems0 list all share names o k body items0
//
// swagger:model ListAllShareNamesOKBodyItems0
type ListAllShareNamesOKBodyItems0 struct {

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace name
	NamespaceName string `json:"namespaceName,omitempty"`

	// namespace token
	NamespaceToken string `json:"namespaceToken,omitempty"`

	// reserved
	Reserved bool `json:"reserved,omitempty"`
}

// Validate validates this list all share names o k body items0
func (o *ListAllShareNamesOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list all share names o k body items0 based on context it is used
func (o *ListAllShareNamesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAllShareNamesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAllShareNamesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListAllShareNamesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
