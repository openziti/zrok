// Code generated by go-swagger; DO NOT EDIT.

package share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/zrok/rest_model_zrok"
)

// UpdateShareNameOKCode is the HTTP code returned for type UpdateShareNameOK
const UpdateShareNameOKCode int = 200

/*
UpdateShareNameOK name updated successfully

swagger:response updateShareNameOK
*/
type UpdateShareNameOK struct {
}

// NewUpdateShareNameOK creates UpdateShareNameOK with default headers values
func NewUpdateShareNameOK() *UpdateShareNameOK {

	return &UpdateShareNameOK{}
}

// WriteResponse to the client
func (o *UpdateShareNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateShareNameUnauthorizedCode is the HTTP code returned for type UpdateShareNameUnauthorized
const UpdateShareNameUnauthorizedCode int = 401

/*
UpdateShareNameUnauthorized unauthorized

swagger:response updateShareNameUnauthorized
*/
type UpdateShareNameUnauthorized struct {
}

// NewUpdateShareNameUnauthorized creates UpdateShareNameUnauthorized with default headers values
func NewUpdateShareNameUnauthorized() *UpdateShareNameUnauthorized {

	return &UpdateShareNameUnauthorized{}
}

// WriteResponse to the client
func (o *UpdateShareNameUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// UpdateShareNameNotFoundCode is the HTTP code returned for type UpdateShareNameNotFound
const UpdateShareNameNotFoundCode int = 404

/*
UpdateShareNameNotFound name not found

swagger:response updateShareNameNotFound
*/
type UpdateShareNameNotFound struct {
}

// NewUpdateShareNameNotFound creates UpdateShareNameNotFound with default headers values
func NewUpdateShareNameNotFound() *UpdateShareNameNotFound {

	return &UpdateShareNameNotFound{}
}

// WriteResponse to the client
func (o *UpdateShareNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// UpdateShareNameConflictCode is the HTTP code returned for type UpdateShareNameConflict
const UpdateShareNameConflictCode int = 409

/*
UpdateShareNameConflict conflict - cannot change reservation state

swagger:response updateShareNameConflict
*/
type UpdateShareNameConflict struct {

	/*
	  In: Body
	*/
	Payload rest_model_zrok.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateShareNameConflict creates UpdateShareNameConflict with default headers values
func NewUpdateShareNameConflict() *UpdateShareNameConflict {

	return &UpdateShareNameConflict{}
}

// WithPayload adds the payload to the update share name conflict response
func (o *UpdateShareNameConflict) WithPayload(payload rest_model_zrok.ErrorMessage) *UpdateShareNameConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update share name conflict response
func (o *UpdateShareNameConflict) SetPayload(payload rest_model_zrok.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateShareNameConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// UpdateShareNameInternalServerErrorCode is the HTTP code returned for type UpdateShareNameInternalServerError
const UpdateShareNameInternalServerErrorCode int = 500

/*
UpdateShareNameInternalServerError internal server error

swagger:response updateShareNameInternalServerError
*/
type UpdateShareNameInternalServerError struct {
}

// NewUpdateShareNameInternalServerError creates UpdateShareNameInternalServerError with default headers values
func NewUpdateShareNameInternalServerError() *UpdateShareNameInternalServerError {

	return &UpdateShareNameInternalServerError{}
}

// WriteResponse to the client
func (o *UpdateShareNameInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
