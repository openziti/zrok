// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
	"github.com/openziti/zrok/rest_server_zrok/operations/account"
	"github.com/openziti/zrok/rest_server_zrok/operations/admin"
	"github.com/openziti/zrok/rest_server_zrok/operations/agent"
	"github.com/openziti/zrok/rest_server_zrok/operations/environment"
	"github.com/openziti/zrok/rest_server_zrok/operations/metadata"
	"github.com/openziti/zrok/rest_server_zrok/operations/share"
)

// NewZrokAPI creates a new Zrok instance
func NewZrokAPI(spec *loads.Document) *ZrokAPI {
	return &ZrokAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		ShareAccessHandler: share.AccessHandlerFunc(func(params share.AccessParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.Access has not yet been implemented")
		}),
		AdminAddFrontendGrantHandler: admin.AddFrontendGrantHandlerFunc(func(params admin.AddFrontendGrantParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.AddFrontendGrant has not yet been implemented")
		}),
		AdminAddNamespaceFrontendMappingHandler: admin.AddNamespaceFrontendMappingHandlerFunc(func(params admin.AddNamespaceFrontendMappingParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.AddNamespaceFrontendMapping has not yet been implemented")
		}),
		AdminAddNamespaceGrantHandler: admin.AddNamespaceGrantHandlerFunc(func(params admin.AddNamespaceGrantParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.AddNamespaceGrant has not yet been implemented")
		}),
		AdminAddOrganizationMemberHandler: admin.AddOrganizationMemberHandlerFunc(func(params admin.AddOrganizationMemberParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.AddOrganizationMember has not yet been implemented")
		}),
		AccountChangePasswordHandler: account.ChangePasswordHandlerFunc(func(params account.ChangePasswordParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation account.ChangePassword has not yet been implemented")
		}),
		MetadataClientVersionCheckHandler: metadata.ClientVersionCheckHandlerFunc(func(params metadata.ClientVersionCheckParams) middleware.Responder {
			return middleware.NotImplemented("operation metadata.ClientVersionCheck has not yet been implemented")
		}),
		MetadataConfigurationHandler: metadata.ConfigurationHandlerFunc(func(params metadata.ConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation metadata.Configuration has not yet been implemented")
		}),
		AdminCreateAccountHandler: admin.CreateAccountHandlerFunc(func(params admin.CreateAccountParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.CreateAccount has not yet been implemented")
		}),
		AdminCreateFrontendHandler: admin.CreateFrontendHandlerFunc(func(params admin.CreateFrontendParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.CreateFrontend has not yet been implemented")
		}),
		AdminCreateIdentityHandler: admin.CreateIdentityHandlerFunc(func(params admin.CreateIdentityParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.CreateIdentity has not yet been implemented")
		}),
		AdminCreateNamespaceHandler: admin.CreateNamespaceHandlerFunc(func(params admin.CreateNamespaceParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.CreateNamespace has not yet been implemented")
		}),
		AdminCreateOrganizationHandler: admin.CreateOrganizationHandlerFunc(func(params admin.CreateOrganizationParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.CreateOrganization has not yet been implemented")
		}),
		ShareCreateShareNameHandler: share.CreateShareNameHandlerFunc(func(params share.CreateShareNameParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.CreateShareName has not yet been implemented")
		}),
		AdminDeleteAccountHandler: admin.DeleteAccountHandlerFunc(func(params admin.DeleteAccountParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.DeleteAccount has not yet been implemented")
		}),
		AdminDeleteFrontendHandler: admin.DeleteFrontendHandlerFunc(func(params admin.DeleteFrontendParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.DeleteFrontend has not yet been implemented")
		}),
		AdminDeleteFrontendGrantHandler: admin.DeleteFrontendGrantHandlerFunc(func(params admin.DeleteFrontendGrantParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.DeleteFrontendGrant has not yet been implemented")
		}),
		AdminDeleteIdentityHandler: admin.DeleteIdentityHandlerFunc(func(params admin.DeleteIdentityParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.DeleteIdentity has not yet been implemented")
		}),
		AdminDeleteNamespaceHandler: admin.DeleteNamespaceHandlerFunc(func(params admin.DeleteNamespaceParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.DeleteNamespace has not yet been implemented")
		}),
		AdminDeleteOrganizationHandler: admin.DeleteOrganizationHandlerFunc(func(params admin.DeleteOrganizationParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.DeleteOrganization has not yet been implemented")
		}),
		ShareDeleteShareNameHandler: share.DeleteShareNameHandlerFunc(func(params share.DeleteShareNameParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.DeleteShareName has not yet been implemented")
		}),
		EnvironmentDisableHandler: environment.DisableHandlerFunc(func(params environment.DisableParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation environment.Disable has not yet been implemented")
		}),
		EnvironmentEnableHandler: environment.EnableHandlerFunc(func(params environment.EnableParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation environment.Enable has not yet been implemented")
		}),
		AgentEnrollHandler: agent.EnrollHandlerFunc(func(params agent.EnrollParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent.Enroll has not yet been implemented")
		}),
		MetadataGetAccountDetailHandler: metadata.GetAccountDetailHandlerFunc(func(params metadata.GetAccountDetailParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.GetAccountDetail has not yet been implemented")
		}),
		MetadataGetAccountMetricsHandler: metadata.GetAccountMetricsHandlerFunc(func(params metadata.GetAccountMetricsParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.GetAccountMetrics has not yet been implemented")
		}),
		MetadataGetEnvironmentDetailHandler: metadata.GetEnvironmentDetailHandlerFunc(func(params metadata.GetEnvironmentDetailParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.GetEnvironmentDetail has not yet been implemented")
		}),
		MetadataGetEnvironmentMetricsHandler: metadata.GetEnvironmentMetricsHandlerFunc(func(params metadata.GetEnvironmentMetricsParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.GetEnvironmentMetrics has not yet been implemented")
		}),
		MetadataGetFrontendDetailHandler: metadata.GetFrontendDetailHandlerFunc(func(params metadata.GetFrontendDetailParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.GetFrontendDetail has not yet been implemented")
		}),
		MetadataGetShareDetailHandler: metadata.GetShareDetailHandlerFunc(func(params metadata.GetShareDetailParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.GetShareDetail has not yet been implemented")
		}),
		MetadataGetShareMetricsHandler: metadata.GetShareMetricsHandlerFunc(func(params metadata.GetShareMetricsParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.GetShareMetrics has not yet been implemented")
		}),
		MetadataGetSparklinesHandler: metadata.GetSparklinesHandlerFunc(func(params metadata.GetSparklinesParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.GetSparklines has not yet been implemented")
		}),
		AdminGrantsHandler: admin.GrantsHandlerFunc(func(params admin.GrantsParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.Grants has not yet been implemented")
		}),
		AccountInviteHandler: account.InviteHandlerFunc(func(params account.InviteParams) middleware.Responder {
			return middleware.NotImplemented("operation account.Invite has not yet been implemented")
		}),
		AdminInviteTokenGenerateHandler: admin.InviteTokenGenerateHandlerFunc(func(params admin.InviteTokenGenerateParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.InviteTokenGenerate has not yet been implemented")
		}),
		ShareListAllShareNamesHandler: share.ListAllShareNamesHandlerFunc(func(params share.ListAllShareNamesParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.ListAllShareNames has not yet been implemented")
		}),
		AdminListFrontendNamespaceMappingsHandler: admin.ListFrontendNamespaceMappingsHandlerFunc(func(params admin.ListFrontendNamespaceMappingsParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.ListFrontendNamespaceMappings has not yet been implemented")
		}),
		AdminListFrontendsHandler: admin.ListFrontendsHandlerFunc(func(params admin.ListFrontendsParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.ListFrontends has not yet been implemented")
		}),
		MetadataListMembershipsHandler: metadata.ListMembershipsHandlerFunc(func(params metadata.ListMembershipsParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.ListMemberships has not yet been implemented")
		}),
		AdminListNamespaceFrontendMappingsHandler: admin.ListNamespaceFrontendMappingsHandlerFunc(func(params admin.ListNamespaceFrontendMappingsParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.ListNamespaceFrontendMappings has not yet been implemented")
		}),
		AdminListNamespacesHandler: admin.ListNamespacesHandlerFunc(func(params admin.ListNamespacesParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.ListNamespaces has not yet been implemented")
		}),
		MetadataListOrgMembersHandler: metadata.ListOrgMembersHandlerFunc(func(params metadata.ListOrgMembersParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.ListOrgMembers has not yet been implemented")
		}),
		AdminListOrganizationMembersHandler: admin.ListOrganizationMembersHandlerFunc(func(params admin.ListOrganizationMembersParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.ListOrganizationMembers has not yet been implemented")
		}),
		AdminListOrganizationsHandler: admin.ListOrganizationsHandlerFunc(func(params admin.ListOrganizationsParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.ListOrganizations has not yet been implemented")
		}),
		MetadataListPublicFrontendsForAccountHandler: metadata.ListPublicFrontendsForAccountHandlerFunc(func(params metadata.ListPublicFrontendsForAccountParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.ListPublicFrontendsForAccount has not yet been implemented")
		}),
		ShareListShareNamesHandler: share.ListShareNamesHandlerFunc(func(params share.ListShareNamesParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.ListShareNames has not yet been implemented")
		}),
		AccountLoginHandler: account.LoginHandlerFunc(func(params account.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation account.Login has not yet been implemented")
		}),
		MetadataOrgAccountOverviewHandler: metadata.OrgAccountOverviewHandlerFunc(func(params metadata.OrgAccountOverviewParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.OrgAccountOverview has not yet been implemented")
		}),
		MetadataOverviewHandler: metadata.OverviewHandlerFunc(func(params metadata.OverviewParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation metadata.Overview has not yet been implemented")
		}),
		AgentPingHandler: agent.PingHandlerFunc(func(params agent.PingParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent.Ping has not yet been implemented")
		}),
		AccountRegenerateAccountTokenHandler: account.RegenerateAccountTokenHandlerFunc(func(params account.RegenerateAccountTokenParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation account.RegenerateAccountToken has not yet been implemented")
		}),
		AccountRegisterHandler: account.RegisterHandlerFunc(func(params account.RegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation account.Register has not yet been implemented")
		}),
		AgentRemoteAccessHandler: agent.RemoteAccessHandlerFunc(func(params agent.RemoteAccessParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent.RemoteAccess has not yet been implemented")
		}),
		AgentRemoteShareHandler: agent.RemoteShareHandlerFunc(func(params agent.RemoteShareParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent.RemoteShare has not yet been implemented")
		}),
		AgentRemoteStatusHandler: agent.RemoteStatusHandlerFunc(func(params agent.RemoteStatusParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent.RemoteStatus has not yet been implemented")
		}),
		AgentRemoteUnaccessHandler: agent.RemoteUnaccessHandlerFunc(func(params agent.RemoteUnaccessParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent.RemoteUnaccess has not yet been implemented")
		}),
		AgentRemoteUnshareHandler: agent.RemoteUnshareHandlerFunc(func(params agent.RemoteUnshareParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent.RemoteUnshare has not yet been implemented")
		}),
		AdminRemoveNamespaceFrontendMappingHandler: admin.RemoveNamespaceFrontendMappingHandlerFunc(func(params admin.RemoveNamespaceFrontendMappingParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.RemoveNamespaceFrontendMapping has not yet been implemented")
		}),
		AdminRemoveNamespaceGrantHandler: admin.RemoveNamespaceGrantHandlerFunc(func(params admin.RemoveNamespaceGrantParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.RemoveNamespaceGrant has not yet been implemented")
		}),
		AdminRemoveOrganizationMemberHandler: admin.RemoveOrganizationMemberHandlerFunc(func(params admin.RemoveOrganizationMemberParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.RemoveOrganizationMember has not yet been implemented")
		}),
		AccountResetPasswordHandler: account.ResetPasswordHandlerFunc(func(params account.ResetPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation account.ResetPassword has not yet been implemented")
		}),
		AccountResetPasswordRequestHandler: account.ResetPasswordRequestHandlerFunc(func(params account.ResetPasswordRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation account.ResetPasswordRequest has not yet been implemented")
		}),
		ShareShareHandler: share.ShareHandlerFunc(func(params share.ShareParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.Share has not yet been implemented")
		}),
		ShareShare12Handler: share.Share12HandlerFunc(func(params share.Share12Params, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.Share12 has not yet been implemented")
		}),
		AgentShareHTTPHealthcheckHandler: agent.ShareHTTPHealthcheckHandlerFunc(func(params agent.ShareHTTPHealthcheckParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent.ShareHTTPHealthcheck has not yet been implemented")
		}),
		ShareUnaccessHandler: share.UnaccessHandlerFunc(func(params share.UnaccessParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.Unaccess has not yet been implemented")
		}),
		AgentUnenrollHandler: agent.UnenrollHandlerFunc(func(params agent.UnenrollParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent.Unenroll has not yet been implemented")
		}),
		ShareUnshareHandler: share.UnshareHandlerFunc(func(params share.UnshareParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.Unshare has not yet been implemented")
		}),
		ShareUpdateAccessHandler: share.UpdateAccessHandlerFunc(func(params share.UpdateAccessParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.UpdateAccess has not yet been implemented")
		}),
		AdminUpdateFrontendHandler: admin.UpdateFrontendHandlerFunc(func(params admin.UpdateFrontendParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.UpdateFrontend has not yet been implemented")
		}),
		AdminUpdateNamespaceHandler: admin.UpdateNamespaceHandlerFunc(func(params admin.UpdateNamespaceParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin.UpdateNamespace has not yet been implemented")
		}),
		ShareUpdateShareHandler: share.UpdateShareHandlerFunc(func(params share.UpdateShareParams, principal *rest_model_zrok.Principal) middleware.Responder {
			return middleware.NotImplemented("operation share.UpdateShare has not yet been implemented")
		}),
		AccountVerifyHandler: account.VerifyHandlerFunc(func(params account.VerifyParams) middleware.Responder {
			return middleware.NotImplemented("operation account.Verify has not yet been implemented")
		}),
		MetadataVersionHandler: metadata.VersionHandlerFunc(func(params metadata.VersionParams) middleware.Responder {
			return middleware.NotImplemented("operation metadata.Version has not yet been implemented")
		}),
		MetadataVersionInventoryHandler: metadata.VersionInventoryHandlerFunc(func(params metadata.VersionInventoryParams) middleware.Responder {
			return middleware.NotImplemented("operation metadata.VersionInventory has not yet been implemented")
		}),

		// Applies when the "x-token" header is set
		KeyAuth: func(token string) (*rest_model_zrok.Principal, error) {
			return nil, errors.NotImplemented("api key auth (key) x-token from header param [x-token] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*ZrokAPI zrok client access */
type ZrokAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/zrok.v1+json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/zrok.v1+json
	JSONProducer runtime.Producer

	// KeyAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key x-token provided in the header
	KeyAuth func(string) (*rest_model_zrok.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// ShareAccessHandler sets the operation handler for the access operation
	ShareAccessHandler share.AccessHandler
	// AdminAddFrontendGrantHandler sets the operation handler for the add frontend grant operation
	AdminAddFrontendGrantHandler admin.AddFrontendGrantHandler
	// AdminAddNamespaceFrontendMappingHandler sets the operation handler for the add namespace frontend mapping operation
	AdminAddNamespaceFrontendMappingHandler admin.AddNamespaceFrontendMappingHandler
	// AdminAddNamespaceGrantHandler sets the operation handler for the add namespace grant operation
	AdminAddNamespaceGrantHandler admin.AddNamespaceGrantHandler
	// AdminAddOrganizationMemberHandler sets the operation handler for the add organization member operation
	AdminAddOrganizationMemberHandler admin.AddOrganizationMemberHandler
	// AccountChangePasswordHandler sets the operation handler for the change password operation
	AccountChangePasswordHandler account.ChangePasswordHandler
	// MetadataClientVersionCheckHandler sets the operation handler for the client version check operation
	MetadataClientVersionCheckHandler metadata.ClientVersionCheckHandler
	// MetadataConfigurationHandler sets the operation handler for the configuration operation
	MetadataConfigurationHandler metadata.ConfigurationHandler
	// AdminCreateAccountHandler sets the operation handler for the create account operation
	AdminCreateAccountHandler admin.CreateAccountHandler
	// AdminCreateFrontendHandler sets the operation handler for the create frontend operation
	AdminCreateFrontendHandler admin.CreateFrontendHandler
	// AdminCreateIdentityHandler sets the operation handler for the create identity operation
	AdminCreateIdentityHandler admin.CreateIdentityHandler
	// AdminCreateNamespaceHandler sets the operation handler for the create namespace operation
	AdminCreateNamespaceHandler admin.CreateNamespaceHandler
	// AdminCreateOrganizationHandler sets the operation handler for the create organization operation
	AdminCreateOrganizationHandler admin.CreateOrganizationHandler
	// ShareCreateShareNameHandler sets the operation handler for the create share name operation
	ShareCreateShareNameHandler share.CreateShareNameHandler
	// AdminDeleteAccountHandler sets the operation handler for the delete account operation
	AdminDeleteAccountHandler admin.DeleteAccountHandler
	// AdminDeleteFrontendHandler sets the operation handler for the delete frontend operation
	AdminDeleteFrontendHandler admin.DeleteFrontendHandler
	// AdminDeleteFrontendGrantHandler sets the operation handler for the delete frontend grant operation
	AdminDeleteFrontendGrantHandler admin.DeleteFrontendGrantHandler
	// AdminDeleteIdentityHandler sets the operation handler for the delete identity operation
	AdminDeleteIdentityHandler admin.DeleteIdentityHandler
	// AdminDeleteNamespaceHandler sets the operation handler for the delete namespace operation
	AdminDeleteNamespaceHandler admin.DeleteNamespaceHandler
	// AdminDeleteOrganizationHandler sets the operation handler for the delete organization operation
	AdminDeleteOrganizationHandler admin.DeleteOrganizationHandler
	// ShareDeleteShareNameHandler sets the operation handler for the delete share name operation
	ShareDeleteShareNameHandler share.DeleteShareNameHandler
	// EnvironmentDisableHandler sets the operation handler for the disable operation
	EnvironmentDisableHandler environment.DisableHandler
	// EnvironmentEnableHandler sets the operation handler for the enable operation
	EnvironmentEnableHandler environment.EnableHandler
	// AgentEnrollHandler sets the operation handler for the enroll operation
	AgentEnrollHandler agent.EnrollHandler
	// MetadataGetAccountDetailHandler sets the operation handler for the get account detail operation
	MetadataGetAccountDetailHandler metadata.GetAccountDetailHandler
	// MetadataGetAccountMetricsHandler sets the operation handler for the get account metrics operation
	MetadataGetAccountMetricsHandler metadata.GetAccountMetricsHandler
	// MetadataGetEnvironmentDetailHandler sets the operation handler for the get environment detail operation
	MetadataGetEnvironmentDetailHandler metadata.GetEnvironmentDetailHandler
	// MetadataGetEnvironmentMetricsHandler sets the operation handler for the get environment metrics operation
	MetadataGetEnvironmentMetricsHandler metadata.GetEnvironmentMetricsHandler
	// MetadataGetFrontendDetailHandler sets the operation handler for the get frontend detail operation
	MetadataGetFrontendDetailHandler metadata.GetFrontendDetailHandler
	// MetadataGetShareDetailHandler sets the operation handler for the get share detail operation
	MetadataGetShareDetailHandler metadata.GetShareDetailHandler
	// MetadataGetShareMetricsHandler sets the operation handler for the get share metrics operation
	MetadataGetShareMetricsHandler metadata.GetShareMetricsHandler
	// MetadataGetSparklinesHandler sets the operation handler for the get sparklines operation
	MetadataGetSparklinesHandler metadata.GetSparklinesHandler
	// AdminGrantsHandler sets the operation handler for the grants operation
	AdminGrantsHandler admin.GrantsHandler
	// AccountInviteHandler sets the operation handler for the invite operation
	AccountInviteHandler account.InviteHandler
	// AdminInviteTokenGenerateHandler sets the operation handler for the invite token generate operation
	AdminInviteTokenGenerateHandler admin.InviteTokenGenerateHandler
	// ShareListAllShareNamesHandler sets the operation handler for the list all share names operation
	ShareListAllShareNamesHandler share.ListAllShareNamesHandler
	// AdminListFrontendNamespaceMappingsHandler sets the operation handler for the list frontend namespace mappings operation
	AdminListFrontendNamespaceMappingsHandler admin.ListFrontendNamespaceMappingsHandler
	// AdminListFrontendsHandler sets the operation handler for the list frontends operation
	AdminListFrontendsHandler admin.ListFrontendsHandler
	// MetadataListMembershipsHandler sets the operation handler for the list memberships operation
	MetadataListMembershipsHandler metadata.ListMembershipsHandler
	// AdminListNamespaceFrontendMappingsHandler sets the operation handler for the list namespace frontend mappings operation
	AdminListNamespaceFrontendMappingsHandler admin.ListNamespaceFrontendMappingsHandler
	// AdminListNamespacesHandler sets the operation handler for the list namespaces operation
	AdminListNamespacesHandler admin.ListNamespacesHandler
	// MetadataListOrgMembersHandler sets the operation handler for the list org members operation
	MetadataListOrgMembersHandler metadata.ListOrgMembersHandler
	// AdminListOrganizationMembersHandler sets the operation handler for the list organization members operation
	AdminListOrganizationMembersHandler admin.ListOrganizationMembersHandler
	// AdminListOrganizationsHandler sets the operation handler for the list organizations operation
	AdminListOrganizationsHandler admin.ListOrganizationsHandler
	// MetadataListPublicFrontendsForAccountHandler sets the operation handler for the list public frontends for account operation
	MetadataListPublicFrontendsForAccountHandler metadata.ListPublicFrontendsForAccountHandler
	// ShareListShareNamesHandler sets the operation handler for the list share names operation
	ShareListShareNamesHandler share.ListShareNamesHandler
	// AccountLoginHandler sets the operation handler for the login operation
	AccountLoginHandler account.LoginHandler
	// MetadataOrgAccountOverviewHandler sets the operation handler for the org account overview operation
	MetadataOrgAccountOverviewHandler metadata.OrgAccountOverviewHandler
	// MetadataOverviewHandler sets the operation handler for the overview operation
	MetadataOverviewHandler metadata.OverviewHandler
	// AgentPingHandler sets the operation handler for the ping operation
	AgentPingHandler agent.PingHandler
	// AccountRegenerateAccountTokenHandler sets the operation handler for the regenerate account token operation
	AccountRegenerateAccountTokenHandler account.RegenerateAccountTokenHandler
	// AccountRegisterHandler sets the operation handler for the register operation
	AccountRegisterHandler account.RegisterHandler
	// AgentRemoteAccessHandler sets the operation handler for the remote access operation
	AgentRemoteAccessHandler agent.RemoteAccessHandler
	// AgentRemoteShareHandler sets the operation handler for the remote share operation
	AgentRemoteShareHandler agent.RemoteShareHandler
	// AgentRemoteStatusHandler sets the operation handler for the remote status operation
	AgentRemoteStatusHandler agent.RemoteStatusHandler
	// AgentRemoteUnaccessHandler sets the operation handler for the remote unaccess operation
	AgentRemoteUnaccessHandler agent.RemoteUnaccessHandler
	// AgentRemoteUnshareHandler sets the operation handler for the remote unshare operation
	AgentRemoteUnshareHandler agent.RemoteUnshareHandler
	// AdminRemoveNamespaceFrontendMappingHandler sets the operation handler for the remove namespace frontend mapping operation
	AdminRemoveNamespaceFrontendMappingHandler admin.RemoveNamespaceFrontendMappingHandler
	// AdminRemoveNamespaceGrantHandler sets the operation handler for the remove namespace grant operation
	AdminRemoveNamespaceGrantHandler admin.RemoveNamespaceGrantHandler
	// AdminRemoveOrganizationMemberHandler sets the operation handler for the remove organization member operation
	AdminRemoveOrganizationMemberHandler admin.RemoveOrganizationMemberHandler
	// AccountResetPasswordHandler sets the operation handler for the reset password operation
	AccountResetPasswordHandler account.ResetPasswordHandler
	// AccountResetPasswordRequestHandler sets the operation handler for the reset password request operation
	AccountResetPasswordRequestHandler account.ResetPasswordRequestHandler
	// ShareShareHandler sets the operation handler for the share operation
	ShareShareHandler share.ShareHandler
	// ShareShare12Handler sets the operation handler for the share12 operation
	ShareShare12Handler share.Share12Handler
	// AgentShareHTTPHealthcheckHandler sets the operation handler for the share Http healthcheck operation
	AgentShareHTTPHealthcheckHandler agent.ShareHTTPHealthcheckHandler
	// ShareUnaccessHandler sets the operation handler for the unaccess operation
	ShareUnaccessHandler share.UnaccessHandler
	// AgentUnenrollHandler sets the operation handler for the unenroll operation
	AgentUnenrollHandler agent.UnenrollHandler
	// ShareUnshareHandler sets the operation handler for the unshare operation
	ShareUnshareHandler share.UnshareHandler
	// ShareUpdateAccessHandler sets the operation handler for the update access operation
	ShareUpdateAccessHandler share.UpdateAccessHandler
	// AdminUpdateFrontendHandler sets the operation handler for the update frontend operation
	AdminUpdateFrontendHandler admin.UpdateFrontendHandler
	// AdminUpdateNamespaceHandler sets the operation handler for the update namespace operation
	AdminUpdateNamespaceHandler admin.UpdateNamespaceHandler
	// ShareUpdateShareHandler sets the operation handler for the update share operation
	ShareUpdateShareHandler share.UpdateShareHandler
	// AccountVerifyHandler sets the operation handler for the verify operation
	AccountVerifyHandler account.VerifyHandler
	// MetadataVersionHandler sets the operation handler for the version operation
	MetadataVersionHandler metadata.VersionHandler
	// MetadataVersionInventoryHandler sets the operation handler for the version inventory operation
	MetadataVersionInventoryHandler metadata.VersionInventoryHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *ZrokAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *ZrokAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *ZrokAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ZrokAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ZrokAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ZrokAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ZrokAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ZrokAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ZrokAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ZrokAPI
func (o *ZrokAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.KeyAuth == nil {
		unregistered = append(unregistered, "XTokenAuth")
	}

	if o.ShareAccessHandler == nil {
		unregistered = append(unregistered, "share.AccessHandler")
	}
	if o.AdminAddFrontendGrantHandler == nil {
		unregistered = append(unregistered, "admin.AddFrontendGrantHandler")
	}
	if o.AdminAddNamespaceFrontendMappingHandler == nil {
		unregistered = append(unregistered, "admin.AddNamespaceFrontendMappingHandler")
	}
	if o.AdminAddNamespaceGrantHandler == nil {
		unregistered = append(unregistered, "admin.AddNamespaceGrantHandler")
	}
	if o.AdminAddOrganizationMemberHandler == nil {
		unregistered = append(unregistered, "admin.AddOrganizationMemberHandler")
	}
	if o.AccountChangePasswordHandler == nil {
		unregistered = append(unregistered, "account.ChangePasswordHandler")
	}
	if o.MetadataClientVersionCheckHandler == nil {
		unregistered = append(unregistered, "metadata.ClientVersionCheckHandler")
	}
	if o.MetadataConfigurationHandler == nil {
		unregistered = append(unregistered, "metadata.ConfigurationHandler")
	}
	if o.AdminCreateAccountHandler == nil {
		unregistered = append(unregistered, "admin.CreateAccountHandler")
	}
	if o.AdminCreateFrontendHandler == nil {
		unregistered = append(unregistered, "admin.CreateFrontendHandler")
	}
	if o.AdminCreateIdentityHandler == nil {
		unregistered = append(unregistered, "admin.CreateIdentityHandler")
	}
	if o.AdminCreateNamespaceHandler == nil {
		unregistered = append(unregistered, "admin.CreateNamespaceHandler")
	}
	if o.AdminCreateOrganizationHandler == nil {
		unregistered = append(unregistered, "admin.CreateOrganizationHandler")
	}
	if o.ShareCreateShareNameHandler == nil {
		unregistered = append(unregistered, "share.CreateShareNameHandler")
	}
	if o.AdminDeleteAccountHandler == nil {
		unregistered = append(unregistered, "admin.DeleteAccountHandler")
	}
	if o.AdminDeleteFrontendHandler == nil {
		unregistered = append(unregistered, "admin.DeleteFrontendHandler")
	}
	if o.AdminDeleteFrontendGrantHandler == nil {
		unregistered = append(unregistered, "admin.DeleteFrontendGrantHandler")
	}
	if o.AdminDeleteIdentityHandler == nil {
		unregistered = append(unregistered, "admin.DeleteIdentityHandler")
	}
	if o.AdminDeleteNamespaceHandler == nil {
		unregistered = append(unregistered, "admin.DeleteNamespaceHandler")
	}
	if o.AdminDeleteOrganizationHandler == nil {
		unregistered = append(unregistered, "admin.DeleteOrganizationHandler")
	}
	if o.ShareDeleteShareNameHandler == nil {
		unregistered = append(unregistered, "share.DeleteShareNameHandler")
	}
	if o.EnvironmentDisableHandler == nil {
		unregistered = append(unregistered, "environment.DisableHandler")
	}
	if o.EnvironmentEnableHandler == nil {
		unregistered = append(unregistered, "environment.EnableHandler")
	}
	if o.AgentEnrollHandler == nil {
		unregistered = append(unregistered, "agent.EnrollHandler")
	}
	if o.MetadataGetAccountDetailHandler == nil {
		unregistered = append(unregistered, "metadata.GetAccountDetailHandler")
	}
	if o.MetadataGetAccountMetricsHandler == nil {
		unregistered = append(unregistered, "metadata.GetAccountMetricsHandler")
	}
	if o.MetadataGetEnvironmentDetailHandler == nil {
		unregistered = append(unregistered, "metadata.GetEnvironmentDetailHandler")
	}
	if o.MetadataGetEnvironmentMetricsHandler == nil {
		unregistered = append(unregistered, "metadata.GetEnvironmentMetricsHandler")
	}
	if o.MetadataGetFrontendDetailHandler == nil {
		unregistered = append(unregistered, "metadata.GetFrontendDetailHandler")
	}
	if o.MetadataGetShareDetailHandler == nil {
		unregistered = append(unregistered, "metadata.GetShareDetailHandler")
	}
	if o.MetadataGetShareMetricsHandler == nil {
		unregistered = append(unregistered, "metadata.GetShareMetricsHandler")
	}
	if o.MetadataGetSparklinesHandler == nil {
		unregistered = append(unregistered, "metadata.GetSparklinesHandler")
	}
	if o.AdminGrantsHandler == nil {
		unregistered = append(unregistered, "admin.GrantsHandler")
	}
	if o.AccountInviteHandler == nil {
		unregistered = append(unregistered, "account.InviteHandler")
	}
	if o.AdminInviteTokenGenerateHandler == nil {
		unregistered = append(unregistered, "admin.InviteTokenGenerateHandler")
	}
	if o.ShareListAllShareNamesHandler == nil {
		unregistered = append(unregistered, "share.ListAllShareNamesHandler")
	}
	if o.AdminListFrontendNamespaceMappingsHandler == nil {
		unregistered = append(unregistered, "admin.ListFrontendNamespaceMappingsHandler")
	}
	if o.AdminListFrontendsHandler == nil {
		unregistered = append(unregistered, "admin.ListFrontendsHandler")
	}
	if o.MetadataListMembershipsHandler == nil {
		unregistered = append(unregistered, "metadata.ListMembershipsHandler")
	}
	if o.AdminListNamespaceFrontendMappingsHandler == nil {
		unregistered = append(unregistered, "admin.ListNamespaceFrontendMappingsHandler")
	}
	if o.AdminListNamespacesHandler == nil {
		unregistered = append(unregistered, "admin.ListNamespacesHandler")
	}
	if o.MetadataListOrgMembersHandler == nil {
		unregistered = append(unregistered, "metadata.ListOrgMembersHandler")
	}
	if o.AdminListOrganizationMembersHandler == nil {
		unregistered = append(unregistered, "admin.ListOrganizationMembersHandler")
	}
	if o.AdminListOrganizationsHandler == nil {
		unregistered = append(unregistered, "admin.ListOrganizationsHandler")
	}
	if o.MetadataListPublicFrontendsForAccountHandler == nil {
		unregistered = append(unregistered, "metadata.ListPublicFrontendsForAccountHandler")
	}
	if o.ShareListShareNamesHandler == nil {
		unregistered = append(unregistered, "share.ListShareNamesHandler")
	}
	if o.AccountLoginHandler == nil {
		unregistered = append(unregistered, "account.LoginHandler")
	}
	if o.MetadataOrgAccountOverviewHandler == nil {
		unregistered = append(unregistered, "metadata.OrgAccountOverviewHandler")
	}
	if o.MetadataOverviewHandler == nil {
		unregistered = append(unregistered, "metadata.OverviewHandler")
	}
	if o.AgentPingHandler == nil {
		unregistered = append(unregistered, "agent.PingHandler")
	}
	if o.AccountRegenerateAccountTokenHandler == nil {
		unregistered = append(unregistered, "account.RegenerateAccountTokenHandler")
	}
	if o.AccountRegisterHandler == nil {
		unregistered = append(unregistered, "account.RegisterHandler")
	}
	if o.AgentRemoteAccessHandler == nil {
		unregistered = append(unregistered, "agent.RemoteAccessHandler")
	}
	if o.AgentRemoteShareHandler == nil {
		unregistered = append(unregistered, "agent.RemoteShareHandler")
	}
	if o.AgentRemoteStatusHandler == nil {
		unregistered = append(unregistered, "agent.RemoteStatusHandler")
	}
	if o.AgentRemoteUnaccessHandler == nil {
		unregistered = append(unregistered, "agent.RemoteUnaccessHandler")
	}
	if o.AgentRemoteUnshareHandler == nil {
		unregistered = append(unregistered, "agent.RemoteUnshareHandler")
	}
	if o.AdminRemoveNamespaceFrontendMappingHandler == nil {
		unregistered = append(unregistered, "admin.RemoveNamespaceFrontendMappingHandler")
	}
	if o.AdminRemoveNamespaceGrantHandler == nil {
		unregistered = append(unregistered, "admin.RemoveNamespaceGrantHandler")
	}
	if o.AdminRemoveOrganizationMemberHandler == nil {
		unregistered = append(unregistered, "admin.RemoveOrganizationMemberHandler")
	}
	if o.AccountResetPasswordHandler == nil {
		unregistered = append(unregistered, "account.ResetPasswordHandler")
	}
	if o.AccountResetPasswordRequestHandler == nil {
		unregistered = append(unregistered, "account.ResetPasswordRequestHandler")
	}
	if o.ShareShareHandler == nil {
		unregistered = append(unregistered, "share.ShareHandler")
	}
	if o.ShareShare12Handler == nil {
		unregistered = append(unregistered, "share.Share12Handler")
	}
	if o.AgentShareHTTPHealthcheckHandler == nil {
		unregistered = append(unregistered, "agent.ShareHTTPHealthcheckHandler")
	}
	if o.ShareUnaccessHandler == nil {
		unregistered = append(unregistered, "share.UnaccessHandler")
	}
	if o.AgentUnenrollHandler == nil {
		unregistered = append(unregistered, "agent.UnenrollHandler")
	}
	if o.ShareUnshareHandler == nil {
		unregistered = append(unregistered, "share.UnshareHandler")
	}
	if o.ShareUpdateAccessHandler == nil {
		unregistered = append(unregistered, "share.UpdateAccessHandler")
	}
	if o.AdminUpdateFrontendHandler == nil {
		unregistered = append(unregistered, "admin.UpdateFrontendHandler")
	}
	if o.AdminUpdateNamespaceHandler == nil {
		unregistered = append(unregistered, "admin.UpdateNamespaceHandler")
	}
	if o.ShareUpdateShareHandler == nil {
		unregistered = append(unregistered, "share.UpdateShareHandler")
	}
	if o.AccountVerifyHandler == nil {
		unregistered = append(unregistered, "account.VerifyHandler")
	}
	if o.MetadataVersionHandler == nil {
		unregistered = append(unregistered, "metadata.VersionHandler")
	}
	if o.MetadataVersionInventoryHandler == nil {
		unregistered = append(unregistered, "metadata.VersionInventoryHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ZrokAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ZrokAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "key":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.KeyAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *ZrokAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *ZrokAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/zrok.v1+json":
			result["application/zrok.v1+json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *ZrokAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/zrok.v1+json":
			result["application/zrok.v1+json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ZrokAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the zrok API
func (o *ZrokAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ZrokAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/access"] = share.NewAccess(o.context, o.ShareAccessHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/frontend/grant"] = admin.NewAddFrontendGrant(o.context, o.AdminAddFrontendGrantHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/namespace/frontend/mapping"] = admin.NewAddNamespaceFrontendMapping(o.context, o.AdminAddNamespaceFrontendMappingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/namespace/grant"] = admin.NewAddNamespaceGrant(o.context, o.AdminAddNamespaceGrantHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/organization/add"] = admin.NewAddOrganizationMember(o.context, o.AdminAddOrganizationMemberHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/changePassword"] = account.NewChangePassword(o.context, o.AccountChangePasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clientVersionCheck"] = metadata.NewClientVersionCheck(o.context, o.MetadataClientVersionCheckHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configuration"] = metadata.NewConfiguration(o.context, o.MetadataConfigurationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account"] = admin.NewCreateAccount(o.context, o.AdminCreateAccountHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/frontend"] = admin.NewCreateFrontend(o.context, o.AdminCreateFrontendHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/identity"] = admin.NewCreateIdentity(o.context, o.AdminCreateIdentityHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/namespace"] = admin.NewCreateNamespace(o.context, o.AdminCreateNamespaceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/organization"] = admin.NewCreateOrganization(o.context, o.AdminCreateOrganizationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/share/name"] = share.NewCreateShareName(o.context, o.ShareCreateShareNameHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/account"] = admin.NewDeleteAccount(o.context, o.AdminDeleteAccountHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/frontend"] = admin.NewDeleteFrontend(o.context, o.AdminDeleteFrontendHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/frontend/grant"] = admin.NewDeleteFrontendGrant(o.context, o.AdminDeleteFrontendGrantHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/identity"] = admin.NewDeleteIdentity(o.context, o.AdminDeleteIdentityHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/namespace"] = admin.NewDeleteNamespace(o.context, o.AdminDeleteNamespaceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/organization"] = admin.NewDeleteOrganization(o.context, o.AdminDeleteOrganizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/share/name"] = share.NewDeleteShareName(o.context, o.ShareDeleteShareNameHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/disable"] = environment.NewDisable(o.context, o.EnvironmentDisableHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/enable"] = environment.NewEnable(o.context, o.EnvironmentEnableHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agent/enroll"] = agent.NewEnroll(o.context, o.AgentEnrollHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/detail/account"] = metadata.NewGetAccountDetail(o.context, o.MetadataGetAccountDetailHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/metrics/account"] = metadata.NewGetAccountMetrics(o.context, o.MetadataGetAccountMetricsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/detail/environment/{envZId}"] = metadata.NewGetEnvironmentDetail(o.context, o.MetadataGetEnvironmentDetailHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/metrics/environment/{envId}"] = metadata.NewGetEnvironmentMetrics(o.context, o.MetadataGetEnvironmentMetricsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/detail/frontend/{frontendId}"] = metadata.NewGetFrontendDetail(o.context, o.MetadataGetFrontendDetailHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/detail/share/{shareToken}"] = metadata.NewGetShareDetail(o.context, o.MetadataGetShareDetailHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/metrics/share/{shareToken}"] = metadata.NewGetShareMetrics(o.context, o.MetadataGetShareMetricsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/sparklines"] = metadata.NewGetSparklines(o.context, o.MetadataGetSparklinesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/grants"] = admin.NewGrants(o.context, o.AdminGrantsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invite"] = account.NewInvite(o.context, o.AccountInviteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invite/token/generate"] = admin.NewInviteTokenGenerate(o.context, o.AdminInviteTokenGenerateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/share/names"] = share.NewListAllShareNames(o.context, o.ShareListAllShareNamesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/frontend/namespace/mapping/{frontendToken}"] = admin.NewListFrontendNamespaceMappings(o.context, o.AdminListFrontendNamespaceMappingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/frontends"] = admin.NewListFrontends(o.context, o.AdminListFrontendsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/memberships"] = metadata.NewListMemberships(o.context, o.MetadataListMembershipsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespace/frontend/mapping/{namespaceToken}"] = admin.NewListNamespaceFrontendMappings(o.context, o.AdminListNamespaceFrontendMappingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces"] = admin.NewListNamespaces(o.context, o.AdminListNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/members/{organizationToken}"] = metadata.NewListOrgMembers(o.context, o.MetadataListOrgMembersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/organization/list"] = admin.NewListOrganizationMembers(o.context, o.AdminListOrganizationMembersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations"] = admin.NewListOrganizations(o.context, o.AdminListOrganizationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/overview/public-frontends"] = metadata.NewListPublicFrontendsForAccount(o.context, o.MetadataListPublicFrontendsForAccountHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/share/names/{namespaceToken}"] = share.NewListShareNames(o.context, o.ShareListShareNamesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/login"] = account.NewLogin(o.context, o.AccountLoginHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/overview/{organizationToken}/{accountEmail}"] = metadata.NewOrgAccountOverview(o.context, o.MetadataOrgAccountOverviewHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/overview"] = metadata.NewOverview(o.context, o.MetadataOverviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agent/ping"] = agent.NewPing(o.context, o.AgentPingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/regenerateAccountToken"] = account.NewRegenerateAccountToken(o.context, o.AccountRegenerateAccountTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/register"] = account.NewRegister(o.context, o.AccountRegisterHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agent/access"] = agent.NewRemoteAccess(o.context, o.AgentRemoteAccessHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agent/share"] = agent.NewRemoteShare(o.context, o.AgentRemoteShareHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agent/status"] = agent.NewRemoteStatus(o.context, o.AgentRemoteStatusHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agent/unaccess"] = agent.NewRemoteUnaccess(o.context, o.AgentRemoteUnaccessHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agent/unshare"] = agent.NewRemoteUnshare(o.context, o.AgentRemoteUnshareHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/namespace/frontend/mapping"] = admin.NewRemoveNamespaceFrontendMapping(o.context, o.AdminRemoveNamespaceFrontendMappingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/namespace/grant"] = admin.NewRemoveNamespaceGrant(o.context, o.AdminRemoveNamespaceGrantHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/organization/remove"] = admin.NewRemoveOrganizationMember(o.context, o.AdminRemoveOrganizationMemberHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/resetPassword"] = account.NewResetPassword(o.context, o.AccountResetPasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/resetPasswordRequest"] = account.NewResetPasswordRequest(o.context, o.AccountResetPasswordRequestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/share"] = share.NewShare(o.context, o.ShareShareHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/share12"] = share.NewShare12(o.context, o.ShareShare12Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agent/share/http-healthcheck"] = agent.NewShareHTTPHealthcheck(o.context, o.AgentShareHTTPHealthcheckHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/unaccess"] = share.NewUnaccess(o.context, o.ShareUnaccessHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agent/unenroll"] = agent.NewUnenroll(o.context, o.AgentUnenrollHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/unshare"] = share.NewUnshare(o.context, o.ShareUnshareHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/access"] = share.NewUpdateAccess(o.context, o.ShareUpdateAccessHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/frontend"] = admin.NewUpdateFrontend(o.context, o.AdminUpdateFrontendHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/namespace"] = admin.NewUpdateNamespace(o.context, o.AdminUpdateNamespaceHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/share"] = share.NewUpdateShare(o.context, o.ShareUpdateShareHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/verify"] = account.NewVerify(o.context, o.AccountVerifyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/version"] = metadata.NewVersion(o.context, o.MetadataVersionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/versions"] = metadata.NewVersionInventory(o.context, o.MetadataVersionInventoryHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ZrokAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ZrokAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ZrokAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ZrokAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *ZrokAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
