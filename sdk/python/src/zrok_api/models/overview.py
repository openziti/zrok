# coding: utf-8

"""
    zrok

    zrok client access

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from zrok_api.models.environment_and_resources import EnvironmentAndResources
from zrok_api.models.list_share_namespaces200_response_inner import ListShareNamespaces200ResponseInner
from zrok_api.models.overview_names_inner import OverviewNamesInner
from typing import Optional, Set
from typing_extensions import Self

class Overview(BaseModel):
    """
    Overview
    """ # noqa: E501
    account_limited: Optional[StrictBool] = Field(default=None, alias="accountLimited")
    environments: Optional[List[EnvironmentAndResources]] = None
    namespaces: Optional[List[ListShareNamespaces200ResponseInner]] = None
    names: Optional[List[OverviewNamesInner]] = None
    __properties: ClassVar[List[str]] = ["accountLimited", "environments", "namespaces", "names"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Overview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in environments (list)
        _items = []
        if self.environments:
            for _item_environments in self.environments:
                if _item_environments:
                    _items.append(_item_environments.to_dict())
            _dict['environments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in namespaces (list)
        _items = []
        if self.namespaces:
            for _item_namespaces in self.namespaces:
                if _item_namespaces:
                    _items.append(_item_namespaces.to_dict())
            _dict['namespaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in names (list)
        _items = []
        if self.names:
            for _item_names in self.names:
                if _item_names:
                    _items.append(_item_names.to_dict())
            _dict['names'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Overview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountLimited": obj.get("accountLimited"),
            "environments": [EnvironmentAndResources.from_dict(_item) for _item in obj["environments"]] if obj.get("environments") is not None else None,
            "namespaces": [ListShareNamespaces200ResponseInner.from_dict(_item) for _item in obj["namespaces"]] if obj.get("namespaces") is not None else None,
            "names": [OverviewNamesInner.from_dict(_item) for _item in obj["names"]] if obj.get("names") is not None else None
        })
        return _obj


