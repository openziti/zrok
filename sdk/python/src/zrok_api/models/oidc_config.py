# coding: utf-8

"""
    zrok

    zrok client access

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OidcConfig(BaseModel):
    """
    OidcConfig
    """ # noqa: E501
    provider_id: Optional[StrictStr] = Field(default=None, alias="providerId")
    issuer_url: Optional[StrictStr] = Field(default=None, alias="issuerUrl")
    authz_url_params: Optional[List[StrictStr]] = Field(default=None, alias="authzUrlParams")
    cookie_domain: Optional[StrictStr] = Field(default=None, alias="cookieDomain")
    client_id: Optional[StrictStr] = Field(default=None, alias="clientId")
    client_secret: Optional[StrictStr] = Field(default=None, alias="clientSecret")
    scopes: Optional[List[StrictStr]] = None
    max_session_duration: Optional[StrictStr] = Field(default=None, alias="maxSessionDuration")
    idle_session_duration: Optional[StrictStr] = Field(default=None, alias="idleSessionDuration")
    userinfo_refresh_interval: Optional[StrictStr] = Field(default=None, alias="userinfoRefreshInterval")
    __properties: ClassVar[List[str]] = ["providerId", "issuerUrl", "authzUrlParams", "cookieDomain", "clientId", "clientSecret", "scopes", "maxSessionDuration", "idleSessionDuration", "userinfoRefreshInterval"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OidcConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OidcConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "providerId": obj.get("providerId"),
            "issuerUrl": obj.get("issuerUrl"),
            "authzUrlParams": obj.get("authzUrlParams"),
            "cookieDomain": obj.get("cookieDomain"),
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "scopes": obj.get("scopes"),
            "maxSessionDuration": obj.get("maxSessionDuration"),
            "idleSessionDuration": obj.get("idleSessionDuration"),
            "userinfoRefreshInterval": obj.get("userinfoRefreshInterval")
        })
        return _obj


