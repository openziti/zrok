# coding: utf-8

"""
    zrok

    zrok client access

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zrok_api.models.remote_status200_response_shares_inner_failure import RemoteStatus200ResponseSharesInnerFailure
from typing import Optional, Set
from typing_extensions import Self

class RemoteStatus200ResponseAccessesInner(BaseModel):
    """
    RemoteStatus200ResponseAccessesInner
    """ # noqa: E501
    frontend_token: Optional[StrictStr] = Field(default=None, alias="frontendToken")
    token: Optional[StrictStr] = None
    bind_address: Optional[StrictStr] = Field(default=None, alias="bindAddress")
    response_headers: Optional[List[StrictStr]] = Field(default=None, alias="responseHeaders")
    status: Optional[StrictStr] = None
    failure: Optional[RemoteStatus200ResponseSharesInnerFailure] = None
    __properties: ClassVar[List[str]] = ["frontendToken", "token", "bindAddress", "responseHeaders", "status", "failure"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemoteStatus200ResponseAccessesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failure
        if self.failure:
            _dict['failure'] = self.failure.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemoteStatus200ResponseAccessesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frontendToken": obj.get("frontendToken"),
            "token": obj.get("token"),
            "bindAddress": obj.get("bindAddress"),
            "responseHeaders": obj.get("responseHeaders"),
            "status": obj.get("status"),
            "failure": RemoteStatus200ResponseSharesInnerFailure.from_dict(obj["failure"]) if obj.get("failure") is not None else None
        })
        return _obj


