/* tslint:disable */
/* eslint-disable */
/**
 * zrok
 * zrok client access
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OidcConfig
 */
export interface OidcConfig {
    /**
     * 
     * @type {string}
     * @memberof OidcConfig
     */
    providerId?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcConfig
     */
    issuerUrl?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OidcConfig
     */
    authzUrlParams?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OidcConfig
     */
    cookieDomain?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcConfig
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcConfig
     */
    clientSecret?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OidcConfig
     */
    scopes?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OidcConfig
     */
    maxSessionDuration?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcConfig
     */
    idleSessionDuration?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcConfig
     */
    userinfoRefreshInterval?: string;
}

/**
 * Check if a given object implements the OidcConfig interface.
 */
export function instanceOfOidcConfig(value: object): value is OidcConfig {
    return true;
}

export function OidcConfigFromJSON(json: any): OidcConfig {
    return OidcConfigFromJSONTyped(json, false);
}

export function OidcConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): OidcConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'providerId': json['providerId'] == null ? undefined : json['providerId'],
        'issuerUrl': json['issuerUrl'] == null ? undefined : json['issuerUrl'],
        'authzUrlParams': json['authzUrlParams'] == null ? undefined : json['authzUrlParams'],
        'cookieDomain': json['cookieDomain'] == null ? undefined : json['cookieDomain'],
        'clientId': json['clientId'] == null ? undefined : json['clientId'],
        'clientSecret': json['clientSecret'] == null ? undefined : json['clientSecret'],
        'scopes': json['scopes'] == null ? undefined : json['scopes'],
        'maxSessionDuration': json['maxSessionDuration'] == null ? undefined : json['maxSessionDuration'],
        'idleSessionDuration': json['idleSessionDuration'] == null ? undefined : json['idleSessionDuration'],
        'userinfoRefreshInterval': json['userinfoRefreshInterval'] == null ? undefined : json['userinfoRefreshInterval'],
    };
}

export function OidcConfigToJSON(json: any): OidcConfig {
    return OidcConfigToJSONTyped(json, false);
}

export function OidcConfigToJSONTyped(value?: OidcConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'providerId': value['providerId'],
        'issuerUrl': value['issuerUrl'],
        'authzUrlParams': value['authzUrlParams'],
        'cookieDomain': value['cookieDomain'],
        'clientId': value['clientId'],
        'clientSecret': value['clientSecret'],
        'scopes': value['scopes'],
        'maxSessionDuration': value['maxSessionDuration'],
        'idleSessionDuration': value['idleSessionDuration'],
        'userinfoRefreshInterval': value['userinfoRefreshInterval'],
    };
}

