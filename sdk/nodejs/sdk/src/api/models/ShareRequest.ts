/* tslint:disable */
/* eslint-disable */
/**
 * zrok
 * zrok client access
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthUser } from './AuthUser';
import {
    AuthUserFromJSON,
    AuthUserFromJSONTyped,
    AuthUserToJSON,
    AuthUserToJSONTyped,
} from './AuthUser';
import type { NameSelection } from './NameSelection';
import {
    NameSelectionFromJSON,
    NameSelectionFromJSONTyped,
    NameSelectionToJSON,
    NameSelectionToJSONTyped,
} from './NameSelection';

/**
 * 
 * @export
 * @interface ShareRequest
 */
export interface ShareRequest {
    /**
     * 
     * @type {string}
     * @memberof ShareRequest
     */
    envZId?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareRequest
     */
    shareMode?: ShareRequestShareModeEnum;
    /**
     * 
     * @type {Array<NameSelection>}
     * @memberof ShareRequest
     */
    nameSelections?: Array<NameSelection>;
    /**
     * 
     * @type {string}
     * @memberof ShareRequest
     */
    privateShareToken?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareRequest
     */
    backendMode?: ShareRequestBackendModeEnum;
    /**
     * 
     * @type {string}
     * @memberof ShareRequest
     */
    target?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareRequest
     */
    authScheme?: string;
    /**
     * 
     * @type {Array<AuthUser>}
     * @memberof ShareRequest
     */
    basicAuthUsers?: Array<AuthUser>;
    /**
     * 
     * @type {string}
     * @memberof ShareRequest
     */
    oauthProvider?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShareRequest
     */
    oauthEmailDomains?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShareRequest
     */
    oauthRefreshInterval?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareRequest
     */
    permissionMode?: ShareRequestPermissionModeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShareRequest
     */
    accessGrants?: Array<string>;
}


/**
 * @export
 */
export const ShareRequestShareModeEnum = {
    Public: 'public',
    Private: 'private'
} as const;
export type ShareRequestShareModeEnum = typeof ShareRequestShareModeEnum[keyof typeof ShareRequestShareModeEnum];

/**
 * @export
 */
export const ShareRequestBackendModeEnum = {
    Proxy: 'proxy',
    Web: 'web',
    TcpTunnel: 'tcpTunnel',
    UdpTunnel: 'udpTunnel',
    Caddy: 'caddy',
    Drive: 'drive',
    Socks: 'socks',
    Vpn: 'vpn'
} as const;
export type ShareRequestBackendModeEnum = typeof ShareRequestBackendModeEnum[keyof typeof ShareRequestBackendModeEnum];

/**
 * @export
 */
export const ShareRequestPermissionModeEnum = {
    Open: 'open',
    Closed: 'closed'
} as const;
export type ShareRequestPermissionModeEnum = typeof ShareRequestPermissionModeEnum[keyof typeof ShareRequestPermissionModeEnum];


/**
 * Check if a given object implements the ShareRequest interface.
 */
export function instanceOfShareRequest(value: object): value is ShareRequest {
    return true;
}

export function ShareRequestFromJSON(json: any): ShareRequest {
    return ShareRequestFromJSONTyped(json, false);
}

export function ShareRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShareRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'envZId': json['envZId'] == null ? undefined : json['envZId'],
        'shareMode': json['shareMode'] == null ? undefined : json['shareMode'],
        'nameSelections': json['nameSelections'] == null ? undefined : ((json['nameSelections'] as Array<any>).map(NameSelectionFromJSON)),
        'privateShareToken': json['privateShareToken'] == null ? undefined : json['privateShareToken'],
        'backendMode': json['backendMode'] == null ? undefined : json['backendMode'],
        'target': json['target'] == null ? undefined : json['target'],
        'authScheme': json['authScheme'] == null ? undefined : json['authScheme'],
        'basicAuthUsers': json['basicAuthUsers'] == null ? undefined : ((json['basicAuthUsers'] as Array<any>).map(AuthUserFromJSON)),
        'oauthProvider': json['oauthProvider'] == null ? undefined : json['oauthProvider'],
        'oauthEmailDomains': json['oauthEmailDomains'] == null ? undefined : json['oauthEmailDomains'],
        'oauthRefreshInterval': json['oauthRefreshInterval'] == null ? undefined : json['oauthRefreshInterval'],
        'permissionMode': json['permissionMode'] == null ? undefined : json['permissionMode'],
        'accessGrants': json['accessGrants'] == null ? undefined : json['accessGrants'],
    };
}

export function ShareRequestToJSON(json: any): ShareRequest {
    return ShareRequestToJSONTyped(json, false);
}

export function ShareRequestToJSONTyped(value?: ShareRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'envZId': value['envZId'],
        'shareMode': value['shareMode'],
        'nameSelections': value['nameSelections'] == null ? undefined : ((value['nameSelections'] as Array<any>).map(NameSelectionToJSON)),
        'privateShareToken': value['privateShareToken'],
        'backendMode': value['backendMode'],
        'target': value['target'],
        'authScheme': value['authScheme'],
        'basicAuthUsers': value['basicAuthUsers'] == null ? undefined : ((value['basicAuthUsers'] as Array<any>).map(AuthUserToJSON)),
        'oauthProvider': value['oauthProvider'],
        'oauthEmailDomains': value['oauthEmailDomains'],
        'oauthRefreshInterval': value['oauthRefreshInterval'],
        'permissionMode': value['permissionMode'],
        'accessGrants': value['accessGrants'],
    };
}

