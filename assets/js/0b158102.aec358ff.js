"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2100],{15871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"guides/agent/http-healthcheck","title":"HTTP Health Checks","description":"As of v1.0.7 the zrok Agent supports health checks for proxy backend shares. Backend health checks are not yet implemented for other backend modes.","source":"@site/versioned_docs/version-1.0/guides/agent/http-healthcheck.mdx","sourceDirName":"guides/agent","slug":"/guides/agent/http-healthcheck","permalink":"/docs/1.0/guides/agent/http-healthcheck","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/zrok/blob/main/docs/versioned_docs/version-1.0/guides/agent/http-healthcheck.mdx","tags":[],"version":"1.0","sidebarPosition":30,"frontMatter":{"title":"HTTP Health Checks","sidebar_label":"HTTP Health Checks","sidebar_position":30},"sidebar":"tutorialSidebar","previous":{"title":"Remoting","permalink":"/docs/1.0/guides/agent/remoting"},"next":{"title":"Linux Agent Service","permalink":"/docs/1.0/guides/agent/linux-service"}}');var h=n(74848),o=n(28453);const r={title:"HTTP Health Checks",sidebar_label:"HTTP Health Checks",sidebar_position:30},s=void 0,i={},a=[{value:"Local Agent Health Checks",id:"local-agent-health-checks",level:2},{value:"Detecting Communications Errors",id:"detecting-communications-errors",level:3},{value:"Remoted Agent Health Checks",id:"remoted-agent-health-checks",level:2}];function l(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,h.jsxs)(h.Fragment,{children:[(0,h.jsxs)(t.p,{children:["As of ",(0,h.jsx)(t.code,{children:"v1.0.7"})," the zrok Agent supports health checks for ",(0,h.jsx)(t.code,{children:"proxy"})," backend shares. Backend health checks are not yet implemented for other backend modes."]}),"\n",(0,h.jsx)(t.h2,{id:"local-agent-health-checks",children:"Local Agent Health Checks"}),"\n",(0,h.jsx)(t.p,{children:"With an Agent running in your environment, create a share:"}),"\n",(0,h.jsx)(t.pre,{children:(0,h.jsx)(t.code,{children:'$ zrok share public http://127.0.0.1:18080\ntoken:"8rvjpmeeyvwc"  frontendEndpoints:"http://8rvjpmeeyvwc.zrok.example.com:8080"\n'})}),"\n",(0,h.jsxs)(t.p,{children:["Then the new ",(0,h.jsx)(t.code,{children:"zrok agent share http-healthcheck"})," command can be used to validate that the Agent is able to communicate with the backend target:"]}),"\n",(0,h.jsx)(t.pre,{children:(0,h.jsx)(t.code,{children:"$ zrok agent share http-healthcheck 8rvjpmeeyvwc GET / 200\nhealthy\n"})}),"\n",(0,h.jsxs)(t.p,{children:["A non-existent endpoint will return a non-",(0,h.jsx)(t.code,{children:"200"})," response:"]}),"\n",(0,h.jsx)(t.pre,{children:(0,h.jsx)(t.code,{children:"$ zrok agent share http-healthcheck 8rvjpmeeyvwc GET /non-existent 200\nunhealthy; unexpected status code; got '202', want '200'\n"})}),"\n",(0,h.jsx)(t.h3,{id:"detecting-communications-errors",children:"Detecting Communications Errors"}),"\n",(0,h.jsx)(t.p,{children:"This health check infrastructure will report any issue communicating with the underlying backend target, including low-level communication errors:"}),"\n",(0,h.jsx)(t.pre,{children:(0,h.jsx)(t.code,{children:'$ zrok share public http://127.1.1.1:9090\ntoken:"2bfvnne6kb3c"  frontendEndpoints:"http://2bfvnne6kb3c.zrok.quigley.com:8080"\n\n$ zrok agent share http-healthcheck 2bfvnne6kb3c GET / 200\nunhealthy; failed to execute request: Get "http://127.1.1.1:9090/": dial tcp 127.1.1.1:9090: connect: connection refused\n'})}),"\n",(0,h.jsx)(t.h2,{id:"remoted-agent-health-checks",children:"Remoted Agent Health Checks"}),"\n",(0,h.jsxs)(t.p,{children:["When your Agent is remoted and accessible through the zrok API, you can use the ",(0,h.jsx)(t.code,{children:"/agent/share/http-healthcheck"})," endpoint to remotely check your Agent's connectivity to the backend target:"]}),"\n",(0,h.jsx)(t.pre,{children:(0,h.jsx)(t.code,{children:'$ curl -H "X-TOKEN: 5hLXj48Bmn11" -XPOST -H "Content-Type: application/zrok.v1+json" -d \'{"envZId": "MxMbUXSANU", "shareToken": "8rvjpmeeyvwc", "httpVerb": "GET", "endpoint": "/", "expectedHttpResponse": 200}\' http://localhost:18080/api/v1/agent/share/http-healthcheck\n{\n  "healthy": true\n}\n'})}),"\n",(0,h.jsxs)(t.p,{children:["A non-existent health check URL will return a non-",(0,h.jsx)(t.code,{children:"200"})," response:"]}),"\n",(0,h.jsx)(t.pre,{children:(0,h.jsx)(t.code,{children:'$ curl -H "X-TOKEN: 5hLXj48Bmn11" -XPOST -H "Content-Type: application/zrok.v1+json" -d \'{"envZId": "MxMbUXSANU", "shareToken": "8rvjpmeeyvwc", "httpVerb": "GET", "endpoint": "/non-existent", "expectedHttpResponse": 200}\' http://localhost:18080/api/v1/agent/share/http-healthcheck\n{\n  "error": "unexpected status code; got \'202\', want \'200\'"\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,h.jsx)(t,{...e,children:(0,h.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var c=n(96540);const h={},o=c.createContext(h);function r(e){const t=c.useContext(o);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(h):e.components||h:r(e.components),c.createElement(o.Provider,{value:t},e.children)}}}]);